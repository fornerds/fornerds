backend\src\main\java\com\fornerds\FornerdsApplication.java
```
package com.fornerds;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class FornerdsApplication {

	public static void main(String[] args) {
		SpringApplication.run(FornerdsApplication.class, args);
	}

}

```

backend\src\main\java\com\fornerds\domain\project\controller\ProjectController.java
```
package com.fornerds.domain.project.controller;

import com.fornerds.domain.project.dto.ProjectDto;
import com.fornerds.domain.project.entity.Project;
import com.fornerds.domain.project.service.ProjectService;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/api/projects")
public class ProjectController {
    private final ProjectService projectService;

    public ProjectController(ProjectService projectService) {
        this.projectService = projectService;
    }

    @PostMapping
    public ResponseEntity<ProjectDto> createProject(@RequestBody ProjectDto projectDto) {
        Project project = projectService.createProject(projectDto.toEntity());
        ProjectDto responseDto = new ProjectDto(project);
        return ResponseEntity.status(HttpStatus.CREATED).body(responseDto);
    }

    @GetMapping("/{id}")
    public ResponseEntity<ProjectDto> getProjectById(@PathVariable Long id) {
        Project project = projectService.getProjectById(id);
        ProjectDto responseDto = new ProjectDto(project);
        return ResponseEntity.ok(responseDto);
    }

    @GetMapping("/search")
    public ResponseEntity<List<ProjectDto>> searchProjects(@RequestParam String keyword) {
        List<Project> projects = projectService.searchProjects(keyword);
        List<ProjectDto> responseDtos = projects.stream()
                .map(ProjectDto::new)
                .collect(Collectors.toList());
        return ResponseEntity.ok(responseDtos);
    }

    @PutMapping("/{id}")
    public ResponseEntity<ProjectDto> updateProject(@PathVariable Long id, @RequestBody ProjectDto projectDto) {
        Project project = projectService.getProjectById(id);
        project.update(projectDto);
        Project updatedProject = projectService.updateProject(project);
        ProjectDto responseDto = new ProjectDto(updatedProject);
        return ResponseEntity.ok(responseDto);
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteProject(@PathVariable Long id) {
        projectService.deleteProject(id);
        return ResponseEntity.noContent().build();
    }
}

```

backend\src\main\java\com\fornerds\domain\project\dto\ProjectDto.java
```
package com.fornerds.domain.project.dto;

import com.fornerds.domain.project.entity.Difficulty;
import com.fornerds.domain.project.entity.Project;
import com.fornerds.domain.project.entity.ProjectStatus;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.time.LocalDateTime;

@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
public class ProjectDto {
    private Long id;
    private String title;
    private ProjectStatus status;
    private String description;
    private String introduction;
    private String keyLearnings;
    private String requirements;
    private LocalDateTime deadline;
    private String estimatedDuration;
    private Difficulty difficulty;
    private String scale;
    private Integer budget;
    private Integer developerCount;
    private boolean isPublic;
    private Integer viewCount;
    private Integer remainingQuests;

    public ProjectDto(Project project) {
        this.id = project.getId();
        this.title = project.getTitle();
        this.status = project.getStatus();
        this.description = project.getDescription();
        this.introduction = project.getIntroduction();
        this.keyLearnings = project.getKeyLearnings();
        this.requirements = project.getRequirements();
        this.deadline = project.getDeadline();
        this.estimatedDuration = project.getEstimatedDuration();
        this.difficulty = project.getDifficulty();
        this.scale = project.getScale();
        this.budget = project.getBudget();
        this.developerCount = project.getDeveloperCount();
        this.isPublic = project.isPublic();
        this.viewCount = project.getViewCount();
        this.remainingQuests = project.getRemainingQuests();
    }

    public Project toEntity() {
        Project project = new Project();
        project.setTitle(title);
        project.setStatus(status);
        project.setDescription(description);
        project.setIntroduction(introduction);
        project.setKeyLearnings(keyLearnings);
        project.setRequirements(requirements);
        project.setDeadline(deadline);
        project.setEstimatedDuration(estimatedDuration);
        project.setDifficulty(difficulty);
        project.setScale(scale);
        project.setBudget(budget);
        project.setDeveloperCount(developerCount);
        project.setPublic(isPublic);
        project.setViewCount(viewCount);
        project.setRemainingQuests(remainingQuests);
        return project;
    }
}

```

backend\src\main\java\com\fornerds\domain\project\entity\Difficulty.java
```
package com.fornerds.domain.project.entity;

public enum Difficulty {
    EASY,
    MEDIUM,
    HARD
}

```

backend\src\main\java\com\fornerds\domain\project\entity\Project.java
```
package com.fornerds.domain.project.entity;

import com.fornerds.domain.project.dto.ProjectDto;
import com.fornerds.domain.quest.entity.Quest;
import lombok.*;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;

import jakarta.persistence.*;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

@Entity
@Table(name = "project")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
public class Project {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(nullable = false)
    private String title;

    @Enumerated(EnumType.STRING)
    private ProjectStatus status;

    @Lob
    private String description;

    @Lob
    private String introduction;

    @Lob
    private String keyLearnings;

    @Lob
    private String requirements;

    private LocalDateTime deadline;

    private String estimatedDuration;

    @Enumerated(EnumType.STRING)
    private Difficulty difficulty;

    private String scale;

    private Integer budget;

    private Integer developerCount;

    private boolean isPublic;

    private Integer viewCount;

    private Integer remainingQuests;

    @CreationTimestamp
    private LocalDateTime createdAt;

    @UpdateTimestamp
    private LocalDateTime updatedAt;

    private LocalDateTime deletedAt;

    @OneToMany(mappedBy = "project", cascade = CascadeType.ALL, orphanRemoval = true)
    private List<Quest> quests = new ArrayList<>();

    public void update(ProjectDto projectDto) {
        this.title = projectDto.getTitle();
        this.status = projectDto.getStatus();
        // 필요한 필드 업데이트
    }

    // 기타 연관관계 매핑
}

```

backend\src\main\java\com\fornerds\domain\project\entity\ProjectStatistics.java
```
package com.fornerds.domain.project.entity;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import jakarta.persistence.*;
import java.time.LocalDate;

@Entity
@Table(name = "project_statistics")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
public class ProjectStatistics {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private LocalDate startDate;

    private LocalDate endDate;

    private Integer totalDevelopers;

    private Float completionRate;

    private Float averageDifficulty;

    private Integer averageDuration;

    private String intervalUnit;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "project_id")
    private Project project;
}

```

backend\src\main\java\com\fornerds\domain\project\entity\ProjectStatus.java
```
package com.fornerds.domain.project.entity;

public enum ProjectStatus {
    IN_PROGRESS,
    COMPLETED
}

```

backend\src\main\java\com\fornerds\domain\project\repository\ProjectRepository.java
```
package com.fornerds.domain.project.repository;

import com.fornerds.domain.project.entity.Difficulty;
import com.fornerds.domain.project.entity.Project;
import com.fornerds.domain.project.entity.ProjectStatus;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.time.LocalDateTime;
import java.util.List;

@Repository
public interface ProjectRepository extends JpaRepository<Project, Long> {
    List<Project> findByTitleContaining(String keyword);
    List<Project> findByStatus(ProjectStatus status);
    List<Project> findByDifficulty(Difficulty difficulty);
    List<Project> findByDeadlineAfter(LocalDateTime currentDate);
    List<Project> findByBudgetBetween(Integer minBudget, Integer maxBudget);
    List<Project> findByDeveloperCountLessThan(Integer count);
}

```

backend\src\main\java\com\fornerds\domain\project\service\ProjectService.java
```
package com.fornerds.domain.project.service;

import com.fornerds.domain.project.entity.Project;
import com.fornerds.domain.project.repository.ProjectRepository;
import com.fornerds.global.exception.ResourceNotFoundException;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

@Service
@Transactional
public class ProjectService {
    private final ProjectRepository projectRepository;

    public ProjectService(ProjectRepository projectRepository) {
        this.projectRepository = projectRepository;
    }

    public Project createProject(Project project) {
        return projectRepository.save(project);
    }

    public Project getProjectById(Long id) {
        return projectRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Project not found with id: " + id));
    }

    public List<Project> searchProjects(String keyword) {
        return projectRepository.findByTitleContaining(keyword);
    }

    public Project updateProject(Project project) {
        return projectRepository.save(project);
    }

    public void deleteProject(Long id) {
        projectRepository.deleteById(id);
    }
}

```

backend\src\main\java\com\fornerds\domain\quest\controller\QuestController.java
```
package com.fornerds.domain.quest.controller;

import com.fornerds.domain.project.entity.Project;
import com.fornerds.domain.project.service.ProjectService;
import com.fornerds.domain.quest.dto.QuestDto;
import com.fornerds.domain.quest.entity.Quest;
import com.fornerds.domain.quest.service.QuestService;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/api/quests")
public class QuestController {
    private final QuestService questService;
    private final ProjectService projectService;

    public QuestController(QuestService questService, ProjectService projectService) {
        this.questService = questService;
        this.projectService = projectService;
    }

    @PostMapping
    public ResponseEntity<QuestDto> createQuest(@RequestBody QuestDto questDto) {
        Quest quest = questService.createQuest(questDto.toEntity());
        QuestDto responseDto = new QuestDto(quest);
        return ResponseEntity.status(HttpStatus.CREATED).body(responseDto);
    }

    @GetMapping("/{id}")
    public ResponseEntity<QuestDto> getQuestById(@PathVariable Long id) {
        Quest quest = questService.getQuestById(id);
        QuestDto responseDto = new QuestDto(quest);
        return ResponseEntity.ok(responseDto);
    }

    @GetMapping("/project/{projectId}")
    public ResponseEntity<List<QuestDto>> getQuestsByProject(@PathVariable Long projectId) {
        Project project = projectService.getProjectById(projectId);
        List<Quest> quests = questService.getQuestsByProject(project);
        List<QuestDto> responseDtos = quests.stream()
                .map(QuestDto::new)
                .collect(Collectors.toList());
        return ResponseEntity.ok(responseDtos);
    }

    @PutMapping("/{id}")
    public ResponseEntity<QuestDto> updateQuest(@PathVariable Long id, @RequestBody QuestDto questDto) {
        Quest quest = questService.getQuestById(id);
        quest.update(questDto);
        Quest updatedQuest = questService.updateQuest(quest);
        QuestDto responseDto = new QuestDto(updatedQuest);
        return ResponseEntity.ok(responseDto);
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteQuest(@PathVariable Long id) {
        questService.deleteQuest(id);
        return ResponseEntity.noContent().build();
    }
}

```

backend\src\main\java\com\fornerds\domain\quest\dto\QuestDto.java
```
package com.fornerds.domain.quest.dto;

import com.fornerds.domain.quest.entity.Difficulty;
import com.fornerds.domain.quest.entity.Quest;
import com.fornerds.domain.quest.entity.QuestStatus;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.time.LocalDateTime;

@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
public class QuestDto {
    private Long id;
    private String title;
    private QuestStatus status;
    private String description;
    private String convention;
    private String requirements;
    private String goal;
    private String inputExample;
    private String outputExample;
    private String exampleExplanation;
    private String apiUrl;
    private LocalDateTime startDate;
    private LocalDateTime endDate;
    private LocalDateTime deadline;
    private Difficulty difficulty;
    private Integer budget;
    private Integer developerCount;
    private String scale;
    private Integer rewardCash;
    private Integer rewardExp;
    private Integer rewardPoint;
    private boolean isPublic;
    private Integer viewCount;
    private Integer likeCount;
    private String keyLearnings;
    private Integer estimatedDuration;

    public QuestDto(Quest quest) {
        this.id = quest.getId();
        this.title = quest.getTitle();
        this.status = quest.getStatus();
        this.description = quest.getDescription();
        this.convention = quest.getConvention();
        this.requirements = quest.getRequirements();
        this.goal = quest.getGoal();
        this.inputExample = quest.getInputExample();
        this.outputExample = quest.getOutputExample();
        this.exampleExplanation = quest.getExampleExplanation();
        this.apiUrl = quest.getApiUrl();
        this.startDate = quest.getStartDate();
        this.endDate = quest.getEndDate();
        this.deadline = quest.getDeadline();
        this.difficulty = quest.getDifficulty();
        this.budget = quest.getBudget();
        this.developerCount = quest.getDeveloperCount();
        this.scale = quest.getScale();
        this.rewardCash = quest.getRewardCash();
        this.rewardExp = quest.getRewardExp();
        this.rewardPoint = quest.getRewardPoint();
        this.isPublic = quest.isPublic();
        this.viewCount = quest.getViewCount();
        this.likeCount = quest.getLikeCount();
        this.keyLearnings = quest.getKeyLearnings();
        this.estimatedDuration = quest.getEstimatedDuration();
    }

    public Quest toEntity() {
        Quest quest = new Quest();
        quest.setTitle(title);
        quest.setStatus(status);
        quest.setDescription(description);
        quest.setConvention(convention);
        quest.setRequirements(requirements);
        quest.setGoal(goal);
        quest.setInputExample(inputExample);
        quest.setOutputExample(outputExample);
        quest.setExampleExplanation(exampleExplanation);
        quest.setApiUrl(apiUrl);
        quest.setStartDate(startDate);
        quest.setEndDate(endDate);
        quest.setDeadline(deadline);
        quest.setDifficulty(difficulty);
        quest.setBudget(budget);
        quest.setDeveloperCount(developerCount);
        quest.setScale(scale);
        quest.setRewardCash(rewardCash);
        quest.setRewardExp(rewardExp);
        quest.setRewardPoint(rewardPoint);
        quest.setPublic(isPublic);
        quest.setViewCount(viewCount);
        quest.setLikeCount(likeCount);
        quest.setKeyLearnings(keyLearnings);
        quest.setEstimatedDuration(estimatedDuration);
        return quest;
    }
}

```

backend\src\main\java\com\fornerds\domain\quest\entity\Difficulty.java
```
package com.fornerds.domain.quest.entity;

public enum Difficulty {
    EASY,
    MEDIUM,
    HARD
}

```

backend\src\main\java\com\fornerds\domain\quest\entity\Quest.java
```
package com.fornerds.domain.quest.entity;

import com.fornerds.domain.project.entity.Project;
import com.fornerds.domain.quest.dto.QuestDto;
import com.fornerds.domain.solution.entity.Solution;
import lombok.*;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;

import jakarta.persistence.*;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

@Entity
@Table(name = "quest")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
public class Quest {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(nullable = false)
    private String title;

    @Enumerated(EnumType.STRING)
    private QuestStatus status;

    @Lob
    private String description;

    @Lob
    private String convention;

    @Lob
    private String requirements;

    @Lob
    private String goal;

    @Lob
    private String inputExample;

    @Lob
    private String outputExample;

    @Lob
    private String exampleExplanation;

    private String apiUrl;

    private LocalDateTime startDate;

    private LocalDateTime endDate;

    private LocalDateTime deadline;

    @Enumerated(EnumType.STRING)
    private Difficulty difficulty;

    private Integer budget;

    private Integer developerCount;

    private String scale;

    private Integer rewardCash;

    private Integer rewardExp;

    private Integer rewardPoint;

    private boolean isPublic;

    private Integer viewCount;

    private Integer likeCount;

    @Lob
    private String keyLearnings;

    private Integer estimatedDuration;

    @CreationTimestamp
    private LocalDateTime createdAt;

    @UpdateTimestamp
    private LocalDateTime updatedAt;

    private LocalDateTime deletedAt;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "project_id")
    private Project project;

    @OneToMany(mappedBy = "quest", cascade = CascadeType.ALL, orphanRemoval = true)
    private List<Solution> solutions = new ArrayList<>();

    public void update(QuestDto questDto) {
        this.title = questDto.getTitle();
        this.status = questDto.getStatus();
        // 필요한 필드 업데이트
    }
    // 기타 연관관계 매핑
}

```

backend\src\main\java\com\fornerds\domain\quest\entity\QuestStatus.java
```
package com.fornerds.domain.quest.entity;

public enum QuestStatus {
    IN_PROGRESS,
    COMPLETED
}

```

backend\src\main\java\com\fornerds\domain\quest\entity\Reward.java
```
package com.fornerds.domain.quest.entity;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;

import jakarta.persistence.*;
import java.time.LocalDateTime;

@Entity
@Table(name = "reward")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
public class Reward {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Enumerated(EnumType.STRING)
    private RewardType rewardType;

    private Integer rewardAmount;

    @CreationTimestamp
    private LocalDateTime createdAt;

    @UpdateTimestamp
    private LocalDateTime updatedAt;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "quest_id")
    private Quest quest;
}

```

backend\src\main\java\com\fornerds\domain\quest\entity\RewardType.java
```
package com.fornerds.domain.quest.entity;

public enum RewardType {
    CASH,
    EXP,
    POINT
}

```

backend\src\main\java\com\fornerds\domain\quest\repository\QuestRepository.java
```
package com.fornerds.domain.quest.repository;

import com.fornerds.domain.project.entity.Project;
import com.fornerds.domain.quest.entity.Difficulty;
import com.fornerds.domain.quest.entity.Quest;
import com.fornerds.domain.quest.entity.QuestStatus;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.time.LocalDateTime;
import java.util.List;

@Repository
public interface QuestRepository extends JpaRepository<Quest, Long> {
    List<Quest> findByProject(Project project);
    List<Quest> findByProjectAndStatus(Project project, QuestStatus status);
    List<Quest> findByTitleContaining(String keyword);
    List<Quest> findByDifficulty(Difficulty difficulty);
    List<Quest> findByDeadlineAfter(LocalDateTime currentDate);
    List<Quest> findByRewardExpGreaterThan(Integer exp);
    List<Quest> findByRewardCashGreaterThan(Integer cash);
    List<Quest> findByEstimatedDurationLessThan(Integer duration);
}

```

backend\src\main\java\com\fornerds\domain\quest\service\QuestService.java
```
package com.fornerds.domain.quest.service;

import com.fornerds.domain.project.entity.Project;
import com.fornerds.domain.quest.entity.Quest;
import com.fornerds.domain.quest.repository.QuestRepository;
import com.fornerds.global.exception.ResourceNotFoundException;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

@Service
@Transactional
public class QuestService {
    private final QuestRepository questRepository;

    public QuestService(QuestRepository questRepository) {
        this.questRepository = questRepository;
    }

    public Quest createQuest(Quest quest) {
        return questRepository.save(quest);
    }

    public Quest getQuestById(Long id) {
        return questRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Quest not found with id: " + id));
    }

    public List<Quest> getQuestsByProject(Project project) {
        return questRepository.findByProject(project);
    }

    public Quest updateQuest(Quest quest) {
        return questRepository.save(quest);
    }

    public void deleteQuest(Long id) {
        questRepository.deleteById(id);
    }
}

```

backend\src\main\java\com\fornerds\domain\solution\controller\SolutionController.java
```
package com.fornerds.domain.solution.controller;

import com.fornerds.domain.quest.entity.Quest;
import com.fornerds.domain.quest.service.QuestService;
import com.fornerds.domain.solution.dto.SolutionDto;
import com.fornerds.domain.solution.entity.Solution;
import com.fornerds.domain.solution.service.SolutionService;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/api/solutions")
public class SolutionController {
    private final SolutionService solutionService;
    private final QuestService questService;

    public SolutionController(SolutionService solutionService, QuestService questService) {
        this.solutionService = solutionService;
        this.questService = questService;
    }

    @PostMapping
    public ResponseEntity<SolutionDto> createSolution(@RequestBody SolutionDto solutionDto) {
        Solution solution = solutionService.createSolution(solutionDto.toEntity());
        SolutionDto responseDto = new SolutionDto(solution);
        return ResponseEntity.status(HttpStatus.CREATED).body(responseDto);
    }

    @GetMapping("/{id}")
    public ResponseEntity<SolutionDto> getSolutionById(@PathVariable Long id) {
        Solution solution = solutionService.getSolutionById(id);
        SolutionDto responseDto = new SolutionDto(solution);
        return ResponseEntity.ok(responseDto);
    }

    @GetMapping("/quest/{questId}")
    public ResponseEntity<List<SolutionDto>> getSolutionsByQuest(@PathVariable Long questId) {
        Quest quest = questService.getQuestById(questId);
        List<Solution> solutions = solutionService.getSolutionsByQuest(quest);
        List<SolutionDto> responseDtos = solutions.stream()
                .map(SolutionDto::new)
                .collect(Collectors.toList());
        return ResponseEntity.ok(responseDtos);
    }

    @PutMapping("/{id}")
    public ResponseEntity<SolutionDto> updateSolution(@PathVariable Long id, @RequestBody SolutionDto solutionDto) {
        Solution solution = solutionService.getSolutionById(id);
        solution.update(solutionDto);
        Solution updatedSolution = solutionService.updateSolution(solution);
        SolutionDto responseDto = new SolutionDto(updatedSolution);
        return ResponseEntity.ok(responseDto);
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteSolution(@PathVariable Long id) {
        solutionService.deleteSolution(id);
        return ResponseEntity.noContent().build();
    }
}
```

backend\src\main\java\com\fornerds\domain\solution\dto\SolutionDto.java
```
package com.fornerds.domain.solution.dto;

import com.fornerds.domain.solution.entity.Solution;
import com.fornerds.domain.solution.entity.SolutionStatus;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.time.LocalDateTime;

@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
public class SolutionDto {
    private Long id;
    private String repositoryUrl;
    private byte[] file;
    private SolutionStatus status;
    private String feedback;
    private Integer memoryUsage;
    private Integer executionTime;
    private Integer likeCount;
    private Integer viewCount;

    public SolutionDto(Solution solution) {
        this.id = solution.getId();
        this.repositoryUrl = solution.getRepositoryUrl();
        this.file = solution.getFile();
        this.status = solution.getStatus();
        this.feedback = solution.getFeedback();
        this.memoryUsage = solution.getMemoryUsage();
        this.executionTime = solution.getExecutionTime();
        this.likeCount = solution.getLikeCount();
        this.viewCount = solution.getViewCount();
    }

    public Solution toEntity() {
        Solution solution = new Solution();
        solution.setRepositoryUrl(repositoryUrl);
        solution.setFile(file);
        solution.setStatus(status);
        solution.setFeedback(feedback);
        solution.setMemoryUsage(memoryUsage);
        solution.setExecutionTime(executionTime);
        solution.setLikeCount(likeCount);
        solution.setViewCount(viewCount);
        return solution;
    }
}
```

backend\src\main\java\com\fornerds\domain\solution\entity\Solution.java
```
package com.fornerds.domain.solution.entity;

import com.fornerds.domain.quest.entity.Quest;
import com.fornerds.domain.solution.dto.SolutionDto;
import com.fornerds.domain.user.entity.User;
import lombok.*;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;

import jakarta.persistence.*;
import java.time.LocalDateTime;

@Entity
@Table(name = "solution")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
public class Solution {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(nullable = false)
    private String repositoryUrl;

    @Lob
    private byte[] file;

    @Enumerated(EnumType.STRING)
    private SolutionStatus status;

    @Lob
    private String feedback;

    private Integer memoryUsage;

    private Integer executionTime;

    private Integer likeCount;

    private Integer viewCount;

    @CreationTimestamp
    private LocalDateTime createdAt;

    @UpdateTimestamp
    private LocalDateTime updatedAt;

    private LocalDateTime deletedAt;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "quest_id")
    private Quest quest;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "user_id")
    private User user;

    public void update(SolutionDto solutionDto) {
        this.repositoryUrl = solutionDto.getRepositoryUrl();
        this.file = solutionDto.getFile();
        // 필요한 필드 업데이트
    }
}
```

backend\src\main\java\com\fornerds\domain\solution\entity\SolutionStatus.java
```
package com.fornerds.domain.solution.entity;

public enum SolutionStatus {
    SUBMITTED,
    PENDING,
    ACCEPTED,
    REJECTED
}
```

backend\src\main\java\com\fornerds\domain\solution\repository\SolutionRepository.java
```
package com.fornerds.domain.solution.repository;

import com.fornerds.domain.quest.entity.Quest;
import com.fornerds.domain.solution.entity.Solution;
import com.fornerds.domain.solution.entity.SolutionStatus;
import com.fornerds.domain.user.entity.User;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public interface SolutionRepository extends JpaRepository<Solution, Long> {
    List<Solution> findByQuest(Quest quest);
    List<Solution> findByQuestAndStatus(Quest quest, SolutionStatus status);
    List<Solution> findByUser(User user);
    List<Solution> findByUserAndStatus(User user, SolutionStatus status);
    List<Solution> findByMemoryUsageLessThan(Integer memory);
    List<Solution> findByExecutionTimeLessThan(Integer time);
}
```

backend\src\main\java\com\fornerds\domain\solution\service\SolutionService.java
```
package com.fornerds.domain.solution.service;

import com.fornerds.domain.quest.entity.Quest;
import com.fornerds.domain.solution.entity.Solution;
import com.fornerds.domain.solution.repository.SolutionRepository;
import com.fornerds.global.exception.ResourceNotFoundException;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

@Service
@Transactional
public class SolutionService {
    private final SolutionRepository solutionRepository;

    public SolutionService(SolutionRepository solutionRepository) {
        this.solutionRepository = solutionRepository;
    }

    public Solution createSolution(Solution solution) {
        return solutionRepository.save(solution);
    }

    public Solution getSolutionById(Long id) {
        return solutionRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Solution not found with id: " + id));
    }

    public List<Solution> getSolutionsByQuest(Quest quest) {
        return solutionRepository.findByQuest(quest);
    }

    public Solution updateSolution(Solution solution) {
        return solutionRepository.save(solution);
    }

    public void deleteSolution(Long id) {
        solutionRepository.deleteById(id);
    }
}
```

backend\src\main\java\com\fornerds\domain\user\controller\UserController.java
```
package com.fornerds.domain.user.controller;

import com.fornerds.domain.user.dto.UserDto;
import com.fornerds.domain.user.entity.User;
import com.fornerds.domain.user.service.UserService;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/users")
public class UserController {
    private final UserService userService;

    public UserController(UserService userService) {
        this.userService = userService;
    }

    @PostMapping("/signup")
    public ResponseEntity<UserDto> signup(@RequestBody UserDto userDto) {
        User user = userService.signup(userDto);
        UserDto responseUserDto = new UserDto(user);
        return ResponseEntity.ok(responseUserDto);
    }

    @PostMapping
    public ResponseEntity<UserDto> createUser(@RequestBody UserDto userDto) {
        User user = userService.createUser(userDto.toEntity());
        UserDto responseDto = new UserDto(user);
        return ResponseEntity.status(HttpStatus.CREATED).body(responseDto);
    }

    @GetMapping("/{id}")
    public ResponseEntity<UserDto> getUserById(@PathVariable Long id) {
        User user = userService.getUserById(id);
        UserDto responseDto = new UserDto(user);
        return ResponseEntity.ok(responseDto);
    }

    @PutMapping("/{id}")
    public ResponseEntity<UserDto> updateUser(@PathVariable Long id, @RequestBody UserDto userDto) {
        User user = userService.getUserById(id);
        user.update(userDto);
        User updatedUser = userService.updateUser(user);
        UserDto responseDto = new UserDto(updatedUser);
        return ResponseEntity.ok(responseDto);
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteUser(@PathVariable Long id) {
        userService.deleteUser(id);
        return ResponseEntity.noContent().build();
    }
}

```

backend\src\main\java\com\fornerds\domain\user\dto\UserDto.java
```
package com.fornerds.domain.user.dto;

import com.fornerds.domain.user.entity.User;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
public class UserDto {
    private Long id;
    private String email;
    private String name;
    private String nickname;
    private String password;

    public UserDto(User user) {
        this.email = user.getEmail();
        this.name = user.getName();
    }

    public User toEntity() {
        User user = new User();
        user.setEmail(email);
        user.setName(name);
        user.setNickname(nickname);
        user.setPassword(password);
        return user;
    }
}

```

backend\src\main\java\com\fornerds\domain\user\entity\Role.java
```
package com.fornerds.domain.user.entity;

public enum Role {
    ADMIN,
    USER
}

```

backend\src\main\java\com\fornerds\domain\user\entity\User.java
```
package com.fornerds.domain.user.entity;

import com.fornerds.domain.user.dto.UserDto;
import lombok.*;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.oauth2.core.user.OAuth2User;

import jakarta.persistence.*;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

@Entity
@Table(name = "`users`")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
public class User implements OAuth2User {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(unique = true, nullable = false)
    private String email;

    @Column(nullable = false)
    private String password;

    @Column(nullable = false)
    private String name;

    @Column(nullable = false)
    private String nickname;

    private String phoneNumber;

    private String language;

    private String country;

    private String profileImage;

    @Lob
    private String bio;

    @Enumerated(EnumType.STRING)
    private Role role;

    private Integer level;

    private Integer exp;

    private Integer point;

    private Integer cash;

    private boolean isPublic;

    @CreationTimestamp
    private LocalDateTime createdAt;

    @UpdateTimestamp
    private LocalDateTime updatedAt;

    private LocalDateTime deletedAt;

    // 기타 연관관계 매핑

    public User(String email, String password, String name, String profileImage, Role role) {
        this.email = email;
        this.password = password;
        this.name = name;
        this.profileImage = profileImage;
        this.role = role;
    }

    public User(String email, String password, List<GrantedAuthority> authorities) {
    }

    public String getProfileImage() {
        return profileImage;
    }

    public void setProfileImage(String profileImage) {
        this.profileImage = profileImage;
    }

    public User(String email, String password, String name, Role role) {
        this.email = email;
        this.password = password;
        this.name = name;
        this.role = role;
    }

    public List<GrantedAuthority> getAuthorities() {
        List<GrantedAuthority> authorities = new ArrayList<>();
        authorities.add(new SimpleGrantedAuthority("ROLE_" + role.name()));
        return authorities;
    }

    public User update(String name, String profileImage) {
        this.name = name;
        this.profileImage = profileImage;
        return this;
    }

    public User update(UserDto userDto) {
        this.name = userDto.getName();
        this.nickname = userDto.getNickname();
        // 필요한 필드 업데이트
        return this;
    }

    public Map<String, Object> getAttributes() {
        // OAuth2User 인터페이스의 메소드 구현
        return null;
    }

    public String getName() {
        // OAuth2User 인터페이스의 메소드 구현
        return getEmail();
    }
}

```

backend\src\main\java\com\fornerds\domain\user\entity\UserLevel.java
```
package com.fornerds.domain.user.entity;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;

import jakarta.persistence.*;
import java.time.LocalDateTime;

@Entity
@Table(name = "user_level")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
public class UserLevel {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private Integer level;

    private Integer exp;

    @CreationTimestamp
    private LocalDateTime createdAt;

    @UpdateTimestamp
    private LocalDateTime updatedAt;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "user_id")
    private User user;
}

```

backend\src\main\java\com\fornerds\domain\user\repository\UserRepository.java
```
package com.fornerds.domain.user.repository;

import com.fornerds.domain.user.entity.Role;
import com.fornerds.domain.user.entity.User;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Optional;

@Repository
public interface UserRepository extends JpaRepository<User, Long> {
    Optional<User> findByEmail(String email);
    Optional<User> findByNickname(String nickname);
    List<User> findByRole(Role role);
    List<User> findByLevelGreaterThanEqual(Integer level);
    List<User> findByCountry(String country);
    List<User> findByLanguage(String language);
    boolean existsByEmail(String email);
}

```

backend\src\main\java\com\fornerds\domain\user\service\UserService.java
```
package com.fornerds.domain.user.service;

import com.fornerds.domain.user.dto.UserDto;
import com.fornerds.domain.user.entity.Role;
import com.fornerds.domain.user.entity.User;
import com.fornerds.domain.user.repository.UserRepository;
import com.fornerds.global.exception.ApiException;
import org.springframework.http.HttpStatus;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Service
@Transactional
public class UserService {
    private final UserRepository userRepository;
    private final PasswordEncoder passwordEncoder;

    public UserService(UserRepository userRepository, PasswordEncoder passwordEncoder) {
        this.userRepository = userRepository;
        this.passwordEncoder = passwordEncoder;
    }

    public User signup(UserDto userDto) {
        if (userRepository.existsByEmail(userDto.getEmail())) {
            throw new ApiException("USER_ALREADY_EXISTS", "User already exists with the provided email", HttpStatus.BAD_REQUEST);
        }

        User user = new User();
        user.setEmail(userDto.getEmail());
        user.setPassword(passwordEncoder.encode(userDto.getPassword()));
        user.setName(userDto.getName());
        user.setRole(Role.USER);

        return userRepository.save(user);
    }

    public User createUser(User user) {
        return userRepository.save(user);
    }

    public User getUserById(Long id) {
        return userRepository.findById(id)
                .orElseThrow(() -> new ApiException("USER_NOT_FOUND", "User not found with id: " + id, HttpStatus.NOT_FOUND));
    }

    public User updateUser(User user) {
        return userRepository.save(user);
    }

    public void deleteUser(Long id) {
        userRepository.deleteById(id);
    }
}

```

backend\src\main\java\com\fornerds\global\auth\GoogleOAuth2UserService.java
```
package com.fornerds.global.auth;

import com.fornerds.domain.user.entity.User;
import com.fornerds.domain.user.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService;
import org.springframework.security.oauth2.client.userinfo.OAuth2UserRequest;
import org.springframework.security.oauth2.core.OAuth2AuthenticationException;
import org.springframework.security.oauth2.core.user.OAuth2User;
import org.springframework.stereotype.Service;

@Service
public class GoogleOAuth2UserService extends DefaultOAuth2UserService {
    @Autowired
    private UserRepository userRepository;

    @Override
    public OAuth2User loadUser(OAuth2UserRequest userRequest) throws OAuth2AuthenticationException {
        OAuth2User oAuth2User = super.loadUser(userRequest);

        String registrationId = userRequest.getClientRegistration().getRegistrationId();
        String userNameAttributeName = userRequest.getClientRegistration()
                .getProviderDetails().getUserInfoEndpoint().getUserNameAttributeName();

        OAuth2Attributes attributes = OAuth2Attributes.of(registrationId, userNameAttributeName, oAuth2User.getAttributes());

        User user = saveOrUpdate(attributes);

        return new User(
                user.getEmail(),
                user.getPassword(),
                user.getAuthorities()
        );
    }

    private User saveOrUpdate(OAuth2Attributes attributes) {
        User user = userRepository.findByEmail(attributes.getEmail())
                .map(entity -> entity.update(attributes.getName(), attributes.getProfileImage()))
                .orElse(attributes.toEntity());

        return userRepository.save(user);
    }
}

```

backend\src\main\java\com\fornerds\global\auth\OAuth2Attributes.java
```
package com.fornerds.global.auth;

import com.fornerds.domain.user.entity.Role;
import com.fornerds.domain.user.entity.User;

import java.util.Map;

public class OAuth2Attributes {
    private Map<String, Object> attributes;
    private String nameAttributeKey;
    private String name;
    private String email;
    private String profileImage;

    public OAuth2Attributes(Map<String, Object> attributes, String nameAttributeKey, String name, String email, String profileImage) {
        this.attributes = attributes;
        this.nameAttributeKey = nameAttributeKey;
        this.name = name;
        this.email = email;
        this.profileImage = profileImage;
    }

    public static OAuth2Attributes of(String registrationId, String userNameAttributeName, Map<String, Object> attributes) {
        if ("google".equals(registrationId)) {
            return ofGoogle(userNameAttributeName, attributes);
        }
        return null;
    }

    private static OAuth2Attributes ofGoogle(String userNameAttributeName, Map<String, Object> attributes) {
        return new OAuth2Attributes(
                attributes,
                userNameAttributeName,
                (String) attributes.get("name"),
                (String) attributes.get("email"),
                (String) attributes.get("picture")
        );
    }

    public String getEmail() {
        return email;
    }

    public String getName() {
        return name;
    }

    public String getProfileImage() {
        return profileImage;
    }

    public User toEntity() {
        return new User(email, null, name, Role.USER);
    }
}

```

backend\src\main\java\com\fornerds\global\config\DatabaseConfig.java
```
package com.fornerds.global.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.jdbc.datasource.DriverManagerDataSource;
import org.springframework.orm.jpa.JpaTransactionManager;
import org.springframework.orm.jpa.JpaVendorAdapter;
import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;
import org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;
import org.springframework.transaction.PlatformTransactionManager;

import javax.sql.DataSource;
import java.util.Properties;

@Configuration
public class DatabaseConfig {
    @Bean
    public DataSource dataSource() {
        DriverManagerDataSource dataSource = new DriverManagerDataSource();
        dataSource.setDriverClassName("org.postgresql.Driver");
        dataSource.setUrl("jdbc:postgresql://localhost:5432/temp");
        dataSource.setUsername("postgres");
        dataSource.setPassword("132435");
        return dataSource;
    }

    @Bean
    public LocalContainerEntityManagerFactoryBean entityManagerFactory() {
        LocalContainerEntityManagerFactoryBean em = new LocalContainerEntityManagerFactoryBean();
        em.setDataSource(dataSource());
        em.setPackagesToScan("com.fornerds.domain");
        JpaVendorAdapter vendorAdapter = new HibernateJpaVendorAdapter();
        em.setJpaVendorAdapter(vendorAdapter);
        em.setJpaProperties(additionalProperties());
        return em;
    }

    @Bean
    public PlatformTransactionManager transactionManager() {
        JpaTransactionManager transactionManager = new JpaTransactionManager();
        transactionManager.setEntityManagerFactory(entityManagerFactory().getObject());
        return transactionManager;
    }

    private Properties additionalProperties() {
        Properties properties = new Properties();
        properties.setProperty("hibernate.hbm2ddl.auto", "update");
        properties.setProperty("hibernate.dialect", "org.hibernate.dialect.PostgreSQLDialect");
        return properties;
    }
}

```

backend\src\main\java\com\fornerds\global\config\SecurityConfig.java
```
package com.fornerds.global.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
public class SecurityConfig {
    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http
                .csrf(csrf -> csrf.disable())
                .authorizeHttpRequests(authorize -> authorize
                        .requestMatchers("/api/auth/**").permitAll()
                        .anyRequest().authenticated()
                );
        return http.build();
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }
}
```

backend\src\main\java\com\fornerds\global\exception\ApiException.java
```
package com.fornerds.global.exception;

import org.springframework.http.HttpStatus;

public class ApiException extends RuntimeException {
    private final String errorCode;
    private final String errorMessage;
    private final HttpStatus httpStatus;

    public ApiException(String errorCode, String errorMessage, HttpStatus httpStatus) {
        this.errorCode = errorCode;
        this.errorMessage = errorMessage;
        this.httpStatus = httpStatus;
    }

    public String getErrorCode() {
        return errorCode;
    }

    public String getErrorMessage() {
        return errorMessage;
    }

    public HttpStatus getHttpStatus() {
        return httpStatus;
    }
}

```

backend\src\main\java\com\fornerds\global\exception\ApiExceptionHandler.java
```
package com.fornerds.global.exception;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;

@RestControllerAdvice
public class ApiExceptionHandler {
    @ExceptionHandler(ApiException.class)
    public ResponseEntity<ErrorResponse> handleApiException(ApiException ex) {
        ErrorResponse errorResponse = new ErrorResponse(ex.getErrorCode(), ex.getErrorMessage());
        return new ResponseEntity<>(errorResponse, ex.getHttpStatus());
    }

    @ExceptionHandler(Exception.class)
    public ResponseEntity<ErrorResponse> handleException(Exception ex) {
        ErrorResponse errorResponse = new ErrorResponse("INTERNAL_SERVER_ERROR", "Internal server error");
        return new ResponseEntity<>(errorResponse, HttpStatus.INTERNAL_SERVER_ERROR);
    }
}

```

backend\src\main\java\com\fornerds\global\exception\ErrorResponse.java
```
package com.fornerds.global.exception;

public class ErrorResponse {
    private final String errorCode;
    private final String errorMessage;

    public ErrorResponse(String errorCode, String errorMessage) {
        this.errorCode = errorCode;
        this.errorMessage = errorMessage;
    }

    public String getErrorCode() {
        return errorCode;
    }

    public String getErrorMessage() {
        return errorMessage;
    }
}

```

backend\src\main\java\com\fornerds\global\exception\ResourceNotFoundException.java
```
package com.fornerds.global.exception;

public class ResourceNotFoundException extends RuntimeException {
    public ResourceNotFoundException(String message) {
        super(message);
    }
}
```

backend\src\main\java\com\fornerds\global\util\FileUtils.java
```
package com.fornerds.global.util;

import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;

public class FileUtils {
    private FileUtils() {
        // 생성자
    }

    public static void saveFile(MultipartFile file, String directory) throws IOException {
        Path path = Paths.get(directory, file.getOriginalFilename());
        Files.createDirectories(path.getParent());
        Files.copy(file.getInputStream(), path, StandardCopyOption.REPLACE_EXISTING);
    }

    public static void deleteFile(String filePath) throws IOException {
        Path path = Paths.get(filePath);
        Files.deleteIfExists(path);
    }
}

```

backend\src\main\java\com\fornerds\global\util\JwtAuthenticationFilter.java
```
package com.fornerds.global.util;

import com.fornerds.domain.user.entity.User;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.util.StringUtils;
import org.springframework.web.filter.OncePerRequestFilter;

import java.io.IOException;

public class JwtAuthenticationFilter extends OncePerRequestFilter {
    @Autowired
    private JwtUtils jwtUtils;

    @Autowired
    private UserDetailsServiceImpl userDetailsService;

    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
            throws ServletException, IOException {
        String token = getTokenFromRequest(request);

        if (token != null && jwtUtils.validateToken(token)) {
            String email = jwtUtils.getEmailFromToken(token);

            UserDetails userDetails = userDetailsService.loadUserByUsername(email);
            UsernamePasswordAuthenticationToken authentication = new UsernamePasswordAuthenticationToken(
                    userDetails, null, userDetails.getAuthorities());
            authentication.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));

            SecurityContextHolder.getContext().setAuthentication(authentication);
        }

        filterChain.doFilter(request, response);
    }

    private String getTokenFromRequest(HttpServletRequest request) {
        String bearerToken = request.getHeader("Authorization");

        if (StringUtils.hasText(bearerToken) && bearerToken.startsWith("Bearer ")) {
            return bearerToken.substring(7);
        }

        return null;
    }
}
```

backend\src\main\java\com\fornerds\global\util\JwtUtils.java
```
package com.fornerds.global.util;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import java.util.Date;

@Component
public class JwtUtils {
    @Value("${jwt.secret}")
    private String jwtSecret;

    @Value("${jwt.expiration}")
    private long jwtExpirationMs;

    public String generateToken(String username) {
        Date now = new Date();
        Date expiryDate = new Date(now.getTime() + jwtExpirationMs);

        return Jwts.builder()
                .setSubject(username)
                .setIssuedAt(now)
                .setExpiration(expiryDate)
                .signWith(SignatureAlgorithm.HS512, jwtSecret)
                .compact();
    }

    public String getUsernameFromToken(String token) {
        Claims claims = Jwts.parser()
                .setSigningKey(jwtSecret)
                .parseClaimsJws(token)
                .getBody();

        return claims.getSubject();
    }

    public boolean validateToken(String token) {
        try {
            Jwts.parser().setSigningKey(jwtSecret).parseClaimsJws(token);
            return true;
        } catch (Exception ex) {
            // Token validation failed
            return false;
        }
    }

    public String getEmailFromToken(String token) {
        return Jwts.parser().setSigningKey(jwtSecret).parseClaimsJws(token).getBody().getSubject();
    }
}

```

backend\src\main\java\com\fornerds\global\util\UserDetailsServiceImpl.java
```
package com.fornerds.global.util;

import com.fornerds.domain.user.entity.User;
import com.fornerds.domain.user.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;

@Service
public class UserDetailsServiceImpl implements UserDetailsService {
    @Autowired
    private UserRepository userRepository;

    @Override
    public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException {
        User user = userRepository.findByEmail(email)
                .orElseThrow(() -> new UsernameNotFoundException("User not found with email: " + email));

        return org.springframework.security.core.userdetails.User
                .withUsername(user.getEmail())
                .password(user.getPassword())
                .authorities(user.getAuthorities())
                .build();
    }
}
```

backend\src\test\java\com\fornerds\FornerdsApplicationTests.java
```
package com.fornerds;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class FornerdsApplicationTests {

	@Test
	void contextLoads() {
	}

}

```

frontend\public\index.html
```
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title>ForNerds</title>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style>
      @import url('https://cdnjs.cloudflare.com/ajax/libs/meyer-reset/2.0/reset.min.css');
      @import url('https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap');
    </style>
  </head>
  <body>
    <div id="root"></div>
  </body>
</html>

```

frontend\src\App.tsx
```
import React from 'react'
import { createBrowserRouter, RouterProvider } from 'react-router-dom'

// Import all the page components here
import { Home } from './pages/Home/Home'
import { Login } from './pages/Login'
import { Signup } from './pages/Signup'
import { WorldMap } from './pages/WorldMap'
import {
  Projects,
  ProjectsDetails,
  QuestDetails,
  SubmitSolution,
  Solution
} from './pages/Projects'
import { MyPage } from './pages/MyPage'
import { Ranking } from './pages/Ranking'
import { Contact } from './pages/Contact'
import { Community } from './pages/Community'
import { Admin } from './pages/Admin'

const router = createBrowserRouter([
  {
    path: '/',
    element: <Home />
  },
  {
    path: '/login',
    element: <Login />
  },
  {
    path: '/signup',
    element: <Signup />
  },
  {
    path: '/worldmap',
    element: <WorldMap />
  },
  {
    path: '/projects/:categoryId',
    element: <Projects />
  },
  {
    path: '/projects/:categoryId/:projectId',
    element: <ProjectsDetails />
  },
  {
    path: '/projects/:categoryId/:projectId/quests/:questId',
    element: <QuestDetails />
  },
  {
    path: '/projects/:categoryId/:projectId/quests/:questId/submit-solution',
    element: <SubmitSolution />
  },
  {
    path: '/projects/:categoryId/:projectId/quests/:questId/solution/:solutionId',
    element: <Solution />
  },
  {
    path: '/my-page',
    element: <MyPage />
  },
  {
    path: '/ranking',
    element: <Ranking />
  },
  {
    path: '/contact',
    element: <Contact />
  },
  {
    path: '/community',
    element: <Community />
  },
  {
    path: '/admin',
    element: <Admin />
  }
])

const App = () => {
  return <RouterProvider router={router} />
}

export default App

```

frontend\src\index.tsx
```
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App'
import './global.css'

const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement)

root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
)

```

frontend\src\assets\icons\DiscussionIcon.tsx
```
import React from 'react'

interface DiscussionIconProps {
  stroke: string
  strokeOpacity: string
}

export const DiscussionIcon = ({
  stroke,
  strokeOpacity
}: DiscussionIconProps) => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    width="24"
    height="24"
    viewBox="0 0 24 24"
    fill="none"
  >
    <path
      d="M20.25 8.51104C21.1341 8.79549 21.75 9.6392 21.75 10.6082V14.8938C21.75 16.0304 20.9026 16.9943 19.7697 17.0867C19.4308 17.1144 19.0909 17.1386 18.75 17.1592V20.25L15.75 17.25C14.3963 17.25 13.0556 17.1948 11.7302 17.0866C11.4319 17.0623 11.1534 16.9775 10.9049 16.8451M20.25 8.51104C20.0986 8.46232 19.9393 8.43 19.7739 8.41628C18.4472 8.30616 17.1051 8.25 15.75 8.25C14.3948 8.25 13.0528 8.30616 11.7261 8.41627C10.595 8.51015 9.75 9.47323 9.75 10.6082V14.8937C9.75 15.731 10.2099 16.4746 10.9049 16.8451M20.25 8.51104V6.63731C20.25 5.01589 19.0983 3.61065 17.4903 3.40191C15.4478 3.13676 13.365 3 11.2503 3C9.13533 3 7.05233 3.13678 5.00963 3.40199C3.40173 3.61074 2.25 5.01598 2.25 6.63738V12.8626C2.25 14.484 3.40173 15.8893 5.00964 16.098C5.58661 16.1729 6.16679 16.2376 6.75 16.2918V21L10.9049 16.8451"
      stroke={stroke}
      strokeOpacity={strokeOpacity}
      strokeWidth="1.5"
      strokeLinecap="round"
      strokeLinejoin="round"
    />
  </svg>
)

```

frontend\src\components\AtomComponent\Button\Button.tsx
```
import React, { ReactNode, MouseEvent } from 'react'
import styles from './Button.module.css'

interface ButtonProps {
  children: ReactNode
  type?: 'button' | 'submit' | 'reset'
  variant?: 'lessEmphasize' | 'default' | 'disable' | 'active' | ''
  size?: 'small' | 'big' | ''
  onClick?: (event: MouseEvent<HTMLButtonElement>) => void
  disabled?: boolean
  className?: string
}

export function Button({
  children,
  type = 'button',
  onClick,
  disabled = false,
  size = '',
  variant = '',
  className = ''
}: ButtonProps) {
  const buttonClass = `${styles.button} ${styles[size]} ${styles[variant]} ${className}`

  return (
    <button
      type={type}
      onClick={onClick}
      disabled={disabled}
      className={buttonClass}
    >
      {children}
    </button>
  )
}

export default Button

```

frontend\src\components\AtomComponent\Input\Input.tsx
```
import React, { InputHTMLAttributes } from 'react'
import styles from './Input.module.css'
import { check } from 'prettier'

interface InputProps extends InputHTMLAttributes<HTMLInputElement> {
  error?: string
  variant?:
    | 'primary'
    | 'secondary'
    | 'danger'
    | 'success'
    | 'warning'
    | 'info'
    | ''
  className?: string
  type?: string
  checked?: boolean
}

export function Input({
  error,
  variant = '',
  className = '',
  type = 'text',
  checked,
  ...props
}: InputProps) {
  const inputClass = `${styles.input} ${styles[variant]} ${className}`
  const errorClass = error ? styles.error : ''

  return (
    <input
      className={`${inputClass} ${errorClass}`}
      {...props}
      type={type}
      checked={checked}
    />
  )
}

```

frontend\src\components\AtomComponent\Input\CheckBox\CheckBox.tsx
```
import React from 'react'
import styles from './CheckBox.module.css'
import { Input } from '../Input'
import { ReactComponent as Check } from '../../../../assets/icons/check.svg'

interface iconImageProps {
  src: string
  alt: string
  width: number
  height: number
}

interface CheckBoxProps {
  label: string
  onChange?: (e: React.ChangeEvent<HTMLInputElement>) => void
  checked?: boolean
  iconImage?: iconImageProps
}

export function CheckBox({
  label,
  onChange,
  checked,
  iconImage
}: CheckBoxProps) {
  return (
    <label className={styles.checkBoxContainer}>
      <Input
        type="checkbox"
        className={styles.checkBoxInput}
        name={label}
        onChange={onChange}
        checked={checked}
      />
      <span className={styles.checkBox}>
        <div className={styles.checked}>
          {/* <Check width="10.624" height="7.622" /> */}
          <Check className={styles.checked} width="17" height="11.5" />
        </div>
      </span>
      {iconImage ? (
        <div className={styles.iconImage}>
          <img
            src={iconImage.src}
            alt={iconImage.alt}
            width={iconImage.width}
            height={iconImage.height}
          ></img>
        </div>
      ) : null}
      <span className={`${styles.labelText} font-roboto-body-2`}>{label}</span>
    </label>
  )
}

```

frontend\src\components\AtomComponent\Input\Toggle\Toggle.tsx
```
import React from 'react'
import styles from './Toggle.module.css'
import { Input } from '../Input'

interface ToggleProps {
  label: string
  onChange: (checked: boolean) => void
}

export function Toggle({ label, onChange }: ToggleProps) {
  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    onChange(e.target.checked)
  }

  return (
    <label className={styles.toggleContainer}>
      <span className={`${styles.toggleLabel} font-roboto-body-2`}>
        {label}
      </span>
      <Input
        type="checkbox"
        className={styles.toggleInput}
        onChange={handleChange}
      />
      <span className={styles.slider}></span>
    </label>
  )
}

```

frontend\src\components\AtomComponent\Link\Link.tsx
```
import React, { ReactNode, AnchorHTMLAttributes } from 'react'
import { Link as RouterLink } from 'react-router-dom'
import styles from './Link.module.css'

interface LinkProps extends AnchorHTMLAttributes<HTMLAnchorElement> {
  children: ReactNode
  to: string
  underline?: boolean
  className?: string
}

export function Link({
  children,
  to,
  underline = false,
  className = '',
  ...props
}: LinkProps) {
  const linkClass = `${styles.link} ${
    underline ? styles.underline : ''
  } ${className}`

  return (
    <RouterLink to={to} className={linkClass} {...props}>
      {children}
    </RouterLink>
  )
}

```

frontend\src\components\AtomComponent\Tag\Tag.tsx
```
import React, { ReactNode } from 'react'
import styles from './Tag.module.css'

interface TagProps {
  children: ReactNode
  variant?: 'lighten' | 'active' | 'default' | 'disabled' | ''
  className?: string
  rounded?: boolean
}

export function Tag({
  children,
  variant = '',
  className = '',
  rounded
}: TagProps) {
  const tagClass = `${styles.tag} ${styles[variant]} ${rounded ? styles.rounded : ''} ${className}`

  return <span className={tagClass}>{children}</span>
}

```

frontend\src\components\ModuleComponent\Bookmark\Bookmark.tsx
```
import styles from './Bookmark.module.css'
import { ReactComponent as BookmarkIcon } from '../../../assets/icons/bookmark.svg'
import { Button } from '../../AtomComponent'

interface BookmarkProps {
  width?: string
  height?: string
  isBookmarked?: boolean
  bookmarkCount?: number
  onBookmarkClick: () => void
}

export function Bookmark({
  width,
  height,
  isBookmarked,
  bookmarkCount,
  onBookmarkClick
}: BookmarkProps) {
  return (
    <button
      className={`${styles.bookmark} font-roboto-body-3`}
      onClick={onBookmarkClick}
    >
      <BookmarkIcon
        className={`${styles.bookmarkIcon} ${isBookmarked ? styles.bookmarked : styles.notBookmarked}`}
        width={width || '24'}
        height={height || '24'}
      />
      {bookmarkCount ? bookmarkCount : ''}
    </button>
  )
}

export function BookmarkButton({
  width,
  height,
  isBookmarked,
  onBookmarkClick
}: BookmarkProps) {
  return (
    <Button
      className={`${styles.bookmarkButton} font-roboto-cta-small`}
      onClick={onBookmarkClick}
      variant="default"
    >
      <BookmarkIcon
        className={`${styles.bookmarkIcon} ${isBookmarked ? styles.bookmarked : styles.notBookmarked}`}
        width={width || '24'}
        height={height || '24'}
      />{' '}
      Save
    </Button>
  )
}

```

frontend\src\components\ModuleComponent\Card\Card.tsx
```
import React, { useState } from 'react'
import styles from './Card.module.css'
import { CardProps } from './CardProps'
import { Link, Tag } from '../../AtomComponent'
import { ReactComponent as Hard_white } from '../../../assets/icons/hard_white.svg'
import { ReactComponent as Medium_white } from '../../../assets/icons/medium_white.svg'
import { ReactComponent as Easy_white } from '../../../assets/icons/easy_white.svg'
import { ReactComponent as Hard_disabled } from '../../../assets/icons/hard_disabled.svg'
import { ReactComponent as Medium_disabled } from '../../../assets/icons/medium_disabled.svg'
import { ReactComponent as Easy_disabled } from '../../../assets/icons/easy_disabled.svg'
import { ReactComponent as Users } from '../../../assets/icons/users.svg'
import { ReactComponent as Code_bracket } from '../../../assets/icons/code_bracket.svg'
import { ReactComponent as Calendar } from '../../../assets/icons/calendar.svg'
import { ReactComponent as Right } from '../../../assets/icons/right.svg'
import { Bookmark } from '../Bookmark'
import money from '../../../assets/images/pixel/money.webp'
import cup from '../../../assets/images/pixel/cup.webp'

export function Card(props: CardProps) {
  const [isBookmarked, setIsBookmarked] = useState(props.isBookmarked || false)
  const [bookmarkCount, setBookmarkCount] = useState(props.bookmarkCount || 0)

  const handleBookmarkClick = () => {
    setIsBookmarked(!isBookmarked)
    setBookmarkCount(isBookmarked ? bookmarkCount - 1 : bookmarkCount + 1)
  }

  return (
    <li
      className={
        props.className
          ? `${styles.card} ${props.className} ${props.status === 'inProgress' ? '' : styles.completedCard}`.trim()
          : `${styles.card} ${props.status === 'inProgress' ? '' : styles.completedCard}`.trim()
      }
    >
      <div>
        <header className={styles.header}>
          {props.status === 'inProgress' ? (
            <Tag
              className={`${styles.difficulty} font-roboto-body-3`}
              variant="lighten"
              rounded
            >
              {props.difficulty === 'Hard' ? (
                <Hard_white width="16" height="16" />
              ) : props.difficulty === 'Medium' ? (
                <Medium_white width="16" height="16" />
              ) : props.difficulty === 'Easy' ? (
                <Easy_white width="16" height="16" />
              ) : (
                ''
              )}
              {props.difficulty}
            </Tag>
          ) : (
            <Tag
              className={`${styles.difficulty} font-roboto-body-3`}
              variant="lighten"
              rounded
            >
              {props.difficulty === 'Hard' ? (
                <Hard_disabled width="16" height="16" />
              ) : props.difficulty === 'Medium' ? (
                <Medium_disabled width="16" height="16" />
              ) : props.difficulty === 'Easy' ? (
                <Easy_disabled width="16" height="16" />
              ) : (
                ''
              )}
              {props.difficulty}
            </Tag>
          )}
          <Bookmark
            isBookmarked={isBookmarked}
            bookmarkCount={bookmarkCount}
            onBookmarkClick={handleBookmarkClick}
          />
        </header>
        <main className={styles.content}>
          <div className={styles.textWrap}>
            <h2 className={`${styles.title} font-roboto-card-title`}>
              {props.title}
            </h2>
            <p className={`${styles.description} font-roboto-body-2`}>
              {props.description}
            </p>
          </div>
          <div className={styles.skills}>
            {props.skills &&
              props.skills.map((skill, index) => (
                <Tag
                  key={index}
                  className={`${styles.skill} font-roboto-button text-color-lighten`}
                  variant="default"
                >
                  {skill}
                </Tag>
              ))}
          </div>
        </main>
        <hr className={styles.line} />
        <footer className={styles.footer}>
          <span className={`${styles.footerItem} font-roboto-body-2`}>
            <Users width="24" height="24" /> {props.developerCount} Developers
          </span>
          <span className={`${styles.footerItem} font-roboto-body-2`}>
            <Code_bracket width="24" height="24" /> {props.remaining_quests}{' '}
            Quests left
          </span>
          <span className={`${styles.footerItem} font-roboto-body-2`}>
            <Calendar width="24" height="24" />
            {props.deadline && props.deadline > 0
              ? `${props.deadline} Days left`
              : 'Closed'}
          </span>
        </footer>
      </div>
      <Link className={styles.earn} to={`/projects/1/${props.projectId}`}>
        {props.rewardCash || props.rewardExp ? (
          <>
            <img
              src={props.rewardCash ? money : cup}
              alt={props.rewardCash ? 'money' : 'cup'}
              width={props.rewardCash ? '45px' : '30px'}
              height="30px"
            />
            <span className={`${styles.footerItem} font-roboto-body-2`}>
              {(props.rewardCash && props.rewardCash.toLocaleString()) ||
                (props.rewardExp && props.rewardExp.toLocaleString())}
            </span>
          </>
        ) : (
          ''
        )}
        <Right stroke="#00C4B4" />
      </Link>
    </li>
  )
}

```

frontend\src\components\ModuleComponent\Card\QuestCard.tsx
```
import React, { useState } from 'react'
import styles from './QuestCard.module.css'
import { QuestCardProps } from './CardProps'
import { Link, Tag } from '../../AtomComponent'
import { ReactComponent as Hard_white } from '../../../assets/icons/hard_white.svg'
import { ReactComponent as Medium_white } from '../../../assets/icons/medium_white.svg'
import { ReactComponent as Easy_white } from '../../../assets/icons/easy_white.svg'
import { ReactComponent as Hard_disabled } from '../../../assets/icons/hard_disabled.svg'
import { ReactComponent as Medium_disabled } from '../../../assets/icons/medium_disabled.svg'
import { ReactComponent as Easy_disabled } from '../../../assets/icons/easy_disabled.svg'
import { ReactComponent as Users } from '../../../assets/icons/users.svg'
import { ReactComponent as Calendar } from '../../../assets/icons/calendar.svg'
import { Bookmark } from '../Bookmark'
import money from '../../../assets/images/pixel/money.webp'
import cup from '../../../assets/images/pixel/cup.webp'
import closed from '../../../assets/images/pixel/closed.webp'
import open from '../../../assets/images/pixel/open.webp'
import half_open from '../../../assets/images/pixel/half_open.webp'

export function QuestCard(props: QuestCardProps) {
  const [isBookmarked, setIsBookmarked] = useState(props.isBookmarked || false)
  const [hovered, setHovered] = useState(false)

  const handleBookmarkClick = () => {
    setIsBookmarked(!isBookmarked)
  }

  const handleMouseEnter = () => {
    setHovered(true)
  }

  const handleMouseLeave = () => {
    setHovered(false)
  }

  return (
    <li
      className={
        props.className
          ? `${styles.card} ${props.className} ${props.status === 'inProgress' ? '' : styles.completedCard}`.trim()
          : `${styles.card} ${props.status === 'inProgress' ? '' : styles.completedCard}`.trim()
      }
      onMouseEnter={handleMouseEnter}
      onMouseLeave={handleMouseLeave}
      draggable={false}
    >
      <div className={styles.bookmarkContainer}>
        <Bookmark
          isBookmarked={isBookmarked}
          onBookmarkClick={handleBookmarkClick}
        />
      </div>
      <Link to={props.link} draggable={false}>
        <header className={styles.header}>
          <div className={styles.tagContainer}>
            {props.status === 'inProgress' ? (
              <>
                <Tag
                  className={`${styles.difficulty} font-roboto-body-3`}
                  variant="lighten"
                  rounded
                >
                  {props.difficulty === 'Hard' ? (
                    <Hard_white width="16" height="16" />
                  ) : props.difficulty === 'Medium' ? (
                    <Medium_white width="16" height="16" />
                  ) : props.difficulty === 'Easy' ? (
                    <Easy_white width="16" height="16" />
                  ) : (
                    ''
                  )}
                  {props.difficulty}
                </Tag>
                <Tag
                  className={`${styles.position} font-roboto-body-3`}
                  variant="active"
                >
                  {props.positionName}
                </Tag>
              </>
            ) : (
              <>
                <Tag
                  className={`${styles.difficulty} font-roboto-body-3`}
                  variant="disabled"
                  rounded
                >
                  {props.difficulty === 'Hard' ? (
                    <Hard_disabled width="16" height="16" />
                  ) : props.difficulty === 'Medium' ? (
                    <Medium_disabled width="16" height="16" />
                  ) : props.difficulty === 'Easy' ? (
                    <Easy_disabled width="16" height="16" />
                  ) : (
                    ''
                  )}
                  {props.difficulty}
                </Tag>
                <Tag
                  className={`${styles.position} font-roboto-body-3`}
                  variant="disabled"
                >
                  {props.positionName}
                </Tag>
              </>
            )}
          </div>
        </header>
        <main className={styles.content}>
          <h2
            className={`${styles.title} text-color-lighten  font-roboto-card-title`}
          >
            {props.title}
          </h2>
          <img
            src={
              props.deadline && props.deadline > 0 && !props.opened && hovered
                ? half_open
                : props.opened
                  ? open
                  : closed
            }
            alt="reward"
            className={styles.rewardImage}
            width="60"
            height="60"
            draggable="false"
          />
          <div className={styles.rewardInfo}>
            {props.rewardCash && (
              <div className={styles.rewardItem}>
                <img
                  src={money}
                  alt="money"
                  width="27"
                  height="18"
                  draggable={false}
                />
                <span className="text-color-lighten  font-roboto-button">
                  {props.rewardCash.toLocaleString()}
                </span>
              </div>
            )}
            {props.rewardExp && (
              <div className={styles.rewardItem}>
                <img
                  src={cup}
                  alt="experience"
                  width="20"
                  height="20"
                  draggable={false}
                />
                <span className="text-color-lighten  font-roboto-button">
                  {props.rewardExp.toLocaleString()}
                </span>
              </div>
            )}
          </div>
        </main>
        <footer className={styles.footer}>
          <div className={styles.footerDetails}>
            <span className={`${styles.footerItem} font-roboto-body-2`}>
              <Users width="24" height="24" />
              <p
                className={`${styles.users} text-color-lighten  font-roboto-button`}
              >
                {props.developerCount} Developers
              </p>
            </span>
            <span className={`${styles.footerItem} font-roboto-body-2`}>
              <Calendar width="24" height="24" />
              <p
                className={`${styles.date} text-color-lighten  font-roboto-button`}
              >
                {props.deadline && props.deadline > 0
                  ? `${props.deadline} Days left`
                  : 'Closed'}
              </p>
            </span>
          </div>
        </footer>
      </Link>
    </li>
  )
}

```

frontend\src\components\ModuleComponent\Comment\Comment.tsx
```
import React, { useState } from 'react'
import styles from './Comment.module.css'
import { CommentInput } from '../CommentInput'
import { Input } from '../../AtomComponent'


interface Reply {
  id: number
  content: string
  likeCount: number
  createdAt: string
  updatedAt: string | null
  deletedAt: string | null
  quest_id: number
  user_id: string
  // user: UserProfile
}

export interface CommentProps {
  id: number
  content: string
  likeCount: number
  createdAt: string
  updatedAt: string | null
  deletedAt: string | null
  quest_id: number
  user_id: string
  // user: UserProfile
  replyData: Reply[]
}

interface UserProfile {
  id: string;
  email: string;
  password: string;
  name: string;
  nickname: string;
  phoneNumber: string;
  language: string;
  country: string;
  profileImage: string;
  bio: string;
  role: string;
  level: number;
  exp: number;
  point: number;
  cash: number;
  isPublic: boolean;
  createdAt: string;
  updatedAt: string;
  deletedAt: string | null;
}

interface Props {
  commentData: CommentProps
  currentUser: UserProfile // 현재 로그인한 사용자의 정보를 prop으로 받음
  updateComment: (updatedComment: CommentProps) => void;
  deleteComment: (commentId: number) => void;
  hideEditDelete: Boolean
}

export function Comment({
  commentData,
  currentUser,
  updateComment,
  deleteComment,
  hideEditDelete = false }: Props) {
  const [showReplies, setShowReplies] = useState(false) // 대댓글 표시 상태
  const [editingCommentId, setEditingCommentId] = useState<{ commentId: number | null; replyId: number | null }>({ commentId: null, replyId: null }); // 수정시 대상의 ID확인
  const [editedContent, setEditedContent] = useState<string>(''); // 댓글 수정 내용

  const toggleReplies = () => {
    setShowReplies(!showReplies)
  }

  // 현재 사용자가 comment 또는 reply의 작성자인지 확인하는 함수
  const isCurrentUser = (userId: string) => {
    return userId === currentUser.id
  }

  // Edit버튼 클릭시 동작
  const handleEditClick = (commentId: number, replyId: number | null = null) => {
    setEditingCommentId({ commentId, replyId });
    setEditedContent(replyId ? commentData.replyData.find(reply => reply.id === replyId)?.content || '' : commentData.content);
    console.log(`현재 commentID는 ${commentId}의 Edit버튼 클릭!`)
    console.log(`현재 replyID는 ${replyId}의 Edit버튼 클릭!`)
  };

  // Save버튼 클릭시 동작
  const handleSaveClick = () => {
    console.log(`Save 버튼 클릭!`)
    if (editingCommentId.replyId) {
      const updatedReplyData = commentData.replyData.map(reply =>
        reply.id === editingCommentId.replyId ? { ...reply, content: editedContent } : reply
      );
      updateComment({ ...commentData, replyData: updatedReplyData });
    } else {
      updateComment({ ...commentData, content: editedContent });
    }
    setEditingCommentId({ commentId: null, replyId: null });
  };

  // Delete버튼 클릭시 동작
  const handleDeleteClick = (commentId: number) => {
    console.log(`${commentId}의 Delete버튼 클릭!`)
    deleteComment(commentId);
  };

  const handleSubmitReply = (content: string) => {
    const newReply: Reply = {
      id: commentData.replyData.length + 1,
      content,
      likeCount: 0,
      createdAt: new Date().toISOString(),
      updatedAt: null,
      deletedAt: null,
      quest_id: commentData.quest_id,
      user_id: currentUser.id,
    };
    const updatedReplyData = [...commentData.replyData, newReply];
    updateComment({ ...commentData, replyData: updatedReplyData });
  };

  return (
    <div className={styles.discussion}>
      <div className={styles.comment}>
        <div className={styles.nameBox}>
          <div className={styles.character}>
            <img src={currentUser.profileImage} alt="User Profile" />
          </div>
          <div className={styles.name}> { } </div>
          {!hideEditDelete && isCurrentUser(commentData.user_id) && (
            <div className={styles.editBox}>
              <div className={styles.edit} onClick={() => handleEditClick(commentData.id)}>
                <div className={styles.editIcon}>
                  <svg xmlns="http://www.w3.org/2000/svg" fill="none">
                    <path d="M13.9808 2.80618C14.1843 2.56552 14.4359 2.36964 14.7197 2.231C15.0035 2.09236 15.3132 2.01403 15.6291 2.00097C15.9451 1.98792 16.2603 2.04045 16.5546 2.1552C16.849 2.26995 17.1161 2.44441 17.3389 2.66747C17.5617 2.89052 17.7353 3.15727 17.8487 3.45071C17.9621 3.74416 18.0127 4.05786 17.9973 4.37183C17.982 4.6858 17.901 4.99314 17.7595 5.27427C17.6181 5.5554 17.4193 5.80416 17.1757 6.00468L6.39298 16.7996L2 17.999L3.19808 13.6011L13.9808 2.80618Z" stroke="#1890FF" stroke-width="1.152" stroke-linecap="round" stroke-linejoin="round" />
                  </svg>
                </div>
                <div className={styles.editText}>Edit</div>
              </div>
              <div className={styles.edit} onClick={() => handleDeleteClick(commentData.id)}>
                <div className={styles.editIcon}>
                  <svg xmlns="http://www.w3.org/2000/svg" fill="none">
                    <path d="M12.2837 7.5L11.9952 15M8.00481 15L7.71635 7.5M16.023 4.82547C16.308 4.86851 16.592 4.91456 16.875 4.96358M16.023 4.82547L15.1332 16.3938C15.058 17.3707 14.2434 18.125 13.2637 18.125H6.73631C5.75655 18.125 4.94198 17.3707 4.86683 16.3938L3.97696 4.82547M16.023 4.82547C15.0677 4.6812 14.1013 4.57071 13.125 4.49527M3.125 4.96358C3.40798 4.91456 3.69198 4.86851 3.97696 4.82547M3.97696 4.82547C4.93231 4.6812 5.89874 4.57071 6.875 4.49527M13.125 4.49527V3.73182C13.125 2.74902 12.3661 1.92853 11.3838 1.8971C10.9244 1.8824 10.463 1.875 10 1.875C9.53696 1.875 9.07565 1.8824 8.61618 1.8971C7.63388 1.92853 6.875 2.74902 6.875 3.73182V4.49527M13.125 4.49527C12.0938 4.41558 11.0516 4.375 10 4.375C8.94836 4.375 7.9062 4.41558 6.875 4.49527" stroke="#1890FF" stroke-width="1.2" stroke-linecap="round" stroke-linejoin="round" />
                  </svg>
                </div>
                <div className={styles.editText}>Delete</div>
              </div>
            </div>
          )}
        </div>
        {editingCommentId.commentId === commentData.id && !editingCommentId.replyId ? (
          <div className={styles.comment}>
            <div className={styles.nameBox}>
              <img src={currentUser.profileImage} className={styles.character} alt="User Profile" />
              <div className={styles.inputBox}>
                <Input
                  className={styles.textarea}
                  type="text"
                  value={editedContent}
                  onChange={(e) => setEditedContent(e.target.value)}
                />
                <div className={styles.saveButton} onClick={handleSaveClick}>
                  Save
                </div>
              </div>
            </div>
          </div>
        ) : (
          <div className={styles.text}>{commentData.content}</div>
        )}
        <div className={styles.downBox}>
          <div className={styles.interactions}>
            <div className={styles.replyBox}>
              <div className={styles.replyIcon}>
                <svg xmlns="http://www.w3.org/2000/svg" fill="none">
                  <path d="M5.6 19.92L7.124 18.701L7.134 18.693C7.452 18.438 7.613 18.31 7.792 18.219C7.952 18.137 8.123 18.077 8.3 18.041C8.499 18 8.706 18 9.122 18H17.803C18.921 18 19.481 18 19.908 17.782C20.2843 17.5903 20.5903 17.2843 20.782 16.908C21 16.48 21 15.92 21 14.804V7.197C21 6.079 21 5.519 20.782 5.092C20.5899 4.71558 20.2836 4.40963 19.907 4.218C19.48 4 18.92 4 17.8 4H6.2C5.08 4 4.52 4 4.092 4.218C3.71565 4.40969 3.40969 4.71565 3.218 5.092C3 5.52 3 6.08 3 7.2V18.671C3 19.737 3 20.27 3.218 20.543C3.31174 20.6607 3.43083 20.7557 3.56641 20.821C3.70198 20.8863 3.85053 20.9201 4.001 20.92C4.351 20.92 4.767 20.586 5.6 19.92Z" stroke="white" stroke-opacity="0.65" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" />
                </svg>
              </div>
              <div className={styles.replyText}>
                <div
                  className={styles.reply}
                  onClick={toggleReplies}
                  role="button"
                  tabIndex={0}
                >
                  Reply ({commentData.replyData.length})
                </div>
              </div>
            </div>
            <div className={styles.likeBox}>
              <div className={styles.likeIcon}>
                <svg xmlns="http://www.w3.org/2000/svg" fill="none">
                  <path d="M21 8.25C21 5.76472 18.9013 3.75 16.3125 3.75C14.3769 3.75 12.7153 4.87628 12 6.48342C11.2847 4.87628 9.62312 3.75 7.6875 3.75C5.09867 3.75 3 5.76472 3 8.25C3 15.4706 12 20.25 12 20.25C12 20.25 21 15.4706 21 8.25Z" stroke="white" stroke-opacity="0.65" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" />
                </svg>
              </div>
              <div className={styles.likeText}>{commentData.likeCount}</div>
            </div>
          </div>
          <div className={styles.date}>{commentData.createdAt}</div>
        </div>
      </div>
      {showReplies && (
        <div className={styles.replys}>
          {commentData.replyData.map((reply) => (
            <div className={styles.comment}>
              <div className={styles.nameBox}>
                <div className={styles.character}></div>
                <div className={styles.name}> Name </div>
                {!hideEditDelete && isCurrentUser(reply.user_id) && (
                  <div className={styles.editBox}>
                    <div className={styles.edit} onClick={() => handleEditClick(commentData.id, reply.id)}>
                      <div className={styles.editIcon}>
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none">
                          <path d="M13.9808 2.80618C14.1843 2.56552 14.4359 2.36964 14.7197 2.231C15.0035 2.09236 15.3132 2.01403 15.6291 2.00097C15.9451 1.98792 16.2603 2.04045 16.5546 2.1552C16.849 2.26995 17.1161 2.44441 17.3389 2.66747C17.5617 2.89052 17.7353 3.15727 17.8487 3.45071C17.9621 3.74416 18.0127 4.05786 17.9973 4.37183C17.982 4.6858 17.901 4.99314 17.7595 5.27427C17.6181 5.5554 17.4193 5.80416 17.1757 6.00468L6.39298 16.7996L2 17.999L3.19808 13.6011L13.9808 2.80618Z" stroke="#1890FF" stroke-width="1.152" stroke-linecap="round" stroke-linejoin="round" />
                        </svg>
                      </div>
                      <div className={styles.editText}>Edit</div>
                    </div>
                    <div className={styles.edit} onClick={() => handleDeleteClick(commentData.id)}>
                      <div className={styles.editIcon}>
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none">
                          <path d="M12.2837 7.5L11.9952 15M8.00481 15L7.71635 7.5M16.023 4.82547C16.308 4.86851 16.592 4.91456 16.875 4.96358M16.023 4.82547L15.1332 16.3938C15.058 17.3707 14.2434 18.125 13.2637 18.125H6.73631C5.75655 18.125 4.94198 17.3707 4.86683 16.3938L3.97696 4.82547M16.023 4.82547C15.0677 4.6812 14.1013 4.57071 13.125 4.49527M3.125 4.96358C3.40798 4.91456 3.69198 4.86851 3.97696 4.82547M3.97696 4.82547C4.93231 4.6812 5.89874 4.57071 6.875 4.49527M13.125 4.49527V3.73182C13.125 2.74902 12.3661 1.92853 11.3838 1.8971C10.9244 1.8824 10.463 1.875 10 1.875C9.53696 1.875 9.07565 1.8824 8.61618 1.8971C7.63388 1.92853 6.875 2.74902 6.875 3.73182V4.49527M13.125 4.49527C12.0938 4.41558 11.0516 4.375 10 4.375C8.94836 4.375 7.9062 4.41558 6.875 4.49527" stroke="#1890FF" stroke-width="1.2" stroke-linecap="round" stroke-linejoin="round" />
                        </svg>
                      </div>
                      <div className={styles.editText}>Delete</div>
                    </div>
                  </div>
                )}
              </div>
              {editingCommentId.commentId === commentData.id && editingCommentId.replyId === reply.id ? (
                <div className={styles.comment}>
                  <div className={styles.nameBox}>
                    <div className={styles.character}>
                      <img src={currentUser.profileImage} alt="User Profile" />
                    </div>
                    <div className={styles.inputBox}>
                      <Input
                        className={styles.textarea}
                        type="text"
                        value={editedContent}
                        onChange={(e) => setEditedContent(e.target.value)}
                      />
                      <div className={styles.saveButton} onClick={handleSaveClick}>
                        Save
                      </div>
                    </div>
                  </div>
                </div>
              ) : (
                <div className={styles.text}>{reply.content}</div>
              )}
              <div className={styles.downBox}>
                <div className={styles.interactions}>
                  <div className={styles.likeBox}>
                    <div className={styles.likeIcon}>
                      <svg xmlns="http://www.w3.org/2000/svg" fill="none">
                        <path d="M21 8.25C21 5.76472 18.9013 3.75 16.3125 3.75C14.3769 3.75 12.7153 4.87628 12 6.48342C11.2847 4.87628 9.62312 3.75 7.6875 3.75C5.09867 3.75 3 5.76472 3 8.25C3 15.4706 12 20.25 12 20.25C12 20.25 21 15.4706 21 8.25Z" stroke="white" stroke-opacity="0.65" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" />
                      </svg>
                    </div>
                    <div className={styles.likeText}>{reply.likeCount}</div>
                  </div>
                </div>
                <div className={styles.date}>{reply.createdAt}</div>
              </div>
            </div>
          ))}
          <CommentInput
            isReply={true}
            buttonText="Submit"
            profileImage={currentUser.profileImage}
            onSubmit={handleSubmitReply} />
        </div>
      )}
    </div>

  )
}

```

frontend\src\components\ModuleComponent\CommentInput\CommentInput.tsx
```
import React from 'react'
import styles from './CommentInput.module.css'
import { Button } from '../../AtomComponent'
import { Input } from '../../AtomComponent'

interface CommentInputProps {
  isReply?: boolean
  buttonText: string | null
  onSubmit: (content: string) => void
  profileImage: string
}

export function CommentInput({
  isReply = false,
  buttonText = 'Submit',
  profileImage,
  onSubmit }: CommentInputProps) {

  const [content, setContent] = React.useState('');
  const textareaClass = isReply ? styles.replyTextarea : styles.textarea

  const handleSubmit = () => {
    onSubmit(content);
    setContent('');
  };

  return (
    <div className={styles.commentInput}>
      <img src={profileImage} className={styles.character} alt="User Profile" />
      <div className={styles.inputBox}>
        <Input
          className={textareaClass}
          placeholder='Add to the discussion'
          value={content}
          onChange={(e) => setContent(e.target.value)}>
        </Input>
        <Button
          className={styles.submitButton}
          onClick={handleSubmit}
        >
          {buttonText}
        </Button>
      </div>
    </div>
  )
}

```

frontend\src\components\ModuleComponent\Details\Overview\TextContent\TextContent.tsx
```
import styles from './TextContent.module.css'
import { TextContentProps } from './TextContentProps'

export function TextContent({ title, description, list }: TextContentProps) {
  return (
    <div className={styles.textContent}>
      <p className={`text-color-lighten font-roboto-header-3`}>{title}</p>
      {description ? (
        <p className={`text-color-lighten font-roboto-body-1`}>{description}</p>
      ) : null}
      {list
        ? list?.map((str, index) => (
            <li key={index} className={`text-color-lighten font-roboto-body-1`}>
              {str}
            </li>
          ))
        : null}
    </div>
  )
}

```

frontend\src\components\ModuleComponent\Filter\Filter.tsx
```
import React from 'react'
import styles from './Filter.module.css'

export function Filter() {
  return <></>
}

```

frontend\src\components\ModuleComponent\Filter\CategoryFilter\CategoryFilter.tsx
```
import React, { useState } from 'react'
import styles from './CategoryFilter.module.css'
import { Button } from '../../../AtomComponent'
import { ReactComponent as DownSmall } from '../../../../assets/icons/down_small.svg'
import { ReactComponent as UpSmall } from '../../../../assets/icons/up_small.svg'

export function CategoryFilter() {
  const [isOpen, setIsOpen] = useState(false)
  const [category, setCategory] = useState('iOS Development')
  const handleDownClick = () => {
    setIsOpen(!isOpen)
  }
  const selectCategory = (event: React.MouseEvent<HTMLButtonElement>) => {
    const buttonText = event.currentTarget.textContent
    if (buttonText != null) setCategory(buttonText)
    setIsOpen(!isOpen)
  }

  return (
    <>
      <div className={styles.dropdown}>
        <Button
          className={`${styles.dropdownButton} ${isOpen ? `${styles.backgroundOff}` : `${styles.backgroundOn}`}  text-color-white font-roboto-body-2`}
          onClick={handleDownClick}
        >
          {category}
          {isOpen ? <DownSmall stroke="white" /> : <UpSmall stroke="white" />}
        </Button>

        <div
          className={`${styles.dropdownMenu} ${isOpen ? `${styles.show}` : null}`}
        >
          {isOpen && (
            <>
              <Button
                className={`${styles.dropdownItem} text-color-white font-roboto-body-2`}
                onClick={selectCategory}
              >
                item1
              </Button>
              <Button
                className={`${styles.dropdownItem} text-color-white font-roboto-body-2`}
                onClick={selectCategory}
              >
                item2
              </Button>
              <Button
                className={`${styles.dropdownItem} text-color-white font-roboto-body-2`}
                onClick={selectCategory}
              >
                item3
              </Button>
            </>
          )}
        </div>
      </div>
    </>
  )
}

```

frontend\src\components\ModuleComponent\Filter\ProjectFilter\ProjectFilter.tsx
```
import React, { useState } from 'react'
import styles from './ProjectFilter.module.css'
import { Button } from '../../../AtomComponent'
import { Input, CheckBox } from '../../../AtomComponent'
import { ReactComponent as DownSmall } from '../../../../assets/icons/down_small.svg'
import { ReactComponent as UpSmall } from '../../../../assets/icons/up_small.svg'
import MoneyPixelIcon from '../../../../assets/images/pixel/money.webp'
import CupPixelIcon from '../../../../assets/images/pixel/cup.webp'

interface Filter {
  [key: string]: boolean
}

interface ProjectFilterProps {
  filters: Filter
  onFilterChange: (e: React.ChangeEvent<HTMLInputElement>) => void
}

export function ProjectFilter({ filters, onFilterChange }: ProjectFilterProps) {
  const [isLanguageOpen, setLanguageOpen] = useState(false)
  const languageHandleDownClick = () => {
    setLanguageOpen(!isLanguageOpen)
  }
  const [isDifficultyOpen, setDifficultyOpen] = useState(false)
  const difficultyHandleDownClick = () => {
    setDifficultyOpen(!isDifficultyOpen)
  }
  const [isRewardOpen, setRewardOpen] = useState(false)
  const rewardHandleDownClick = () => {
    setRewardOpen(!isRewardOpen)
  }
  const moneyImg = {
    src: MoneyPixelIcon,
    alt: 'MoneyPixel',
    width: 27,
    height: 18
  }
  const cupImg = {
    src: CupPixelIcon,
    alt: 'CupPixel',
    width: 20,
    height: 20
  }
  return (
    <div className={styles.projectFilter}>
      <div className={styles.dropdown}>
        <Button
          className={`${styles.dropdownButton}  text-color-white font-roboto-body-2`}
          onClick={languageHandleDownClick}
        >
          Language
          {isLanguageOpen ? (
            <DownSmall stroke="white" />
          ) : (
            <UpSmall stroke="white" />
          )}
        </Button>
        <div
          className={`${styles.dropdownMenu} ${isLanguageOpen ? `${styles.show}` : null}`}
        >
          {isLanguageOpen && (
            <>
              <CheckBox
                label="JavaScript"
                onChange={onFilterChange}
                checked={filters.JavaScript}
              />
              <CheckBox
                label="Redux"
                onChange={onFilterChange}
                checked={filters.Redux}
              />
              <CheckBox
                label="HTML"
                onChange={onFilterChange}
                checked={filters.HTML}
              />
              <CheckBox
                label="CSS"
                onChange={onFilterChange}
                checked={filters.CSS}
              />
            </>
          )}
        </div>
      </div>
      <div className={styles.dropdown}>
        <Button
          className={`${styles.dropdownButton}  text-color-white font-roboto-body-2`}
          onClick={difficultyHandleDownClick}
        >
          Difficulty
          {isDifficultyOpen ? (
            <DownSmall stroke="white" />
          ) : (
            <UpSmall stroke="white" />
          )}
        </Button>
        <div
          className={`${styles.dropdownMenu} ${isDifficultyOpen ? `${styles.show}` : null}`}
        >
          {isDifficultyOpen && (
            <>
              <CheckBox
                label="Hard"
                onChange={onFilterChange}
                checked={filters.Hard}
              />
              <CheckBox
                label="Medium"
                onChange={onFilterChange}
                checked={filters.Medium}
              />
              <CheckBox
                label="Easy"
                onChange={onFilterChange}
                checked={filters.Easy}
              />
            </>
          )}
        </div>
      </div>
      <div className={styles.dropdown}>
        <Button
          className={`${styles.dropdownButton}  text-color-white font-roboto-body-2`}
          onClick={rewardHandleDownClick}
        >
          Reward
          {isRewardOpen ? (
            <DownSmall stroke="white" />
          ) : (
            <UpSmall stroke="white" />
          )}
        </Button>
        <div
          className={`${styles.dropdownMenu} ${isRewardOpen ? `${styles.show}` : null}`}
        >
          {isRewardOpen && (
            <>
              <CheckBox label="Only" iconImage={moneyImg} />
              <CheckBox label="Only" iconImage={cupImg} />
            </>
          )}
        </div>
      </div>
    </div>
  )
}

```

frontend\src\components\ModuleComponent\Filter\SortFilter\SortFilter.tsx
```
import React, { useState } from 'react'
import styles from './SortFilter.module.css'
import { ReactComponent as SortIcon } from '../../../../assets/icons/sort.svg'
import { Button } from '../../../AtomComponent'

interface SortDropdownProps {
  onSortChange: (sortType: string) => void
  isSolutionSort?: boolean
}

export function SortFilter({
  onSortChange,
  isSolutionSort
}: SortDropdownProps) {
  const [isOpen, setIsOpen] = useState(false)

  const handleDropdownClick = () => {
    setIsOpen(!isOpen)
  }

  const handleOptionClick = (sortType: string) => {
    onSortChange(sortType)
    setIsOpen(false)
  }

  return (
    <div className={styles.dropdown}>
      <Button
        className={`${styles.dropdownButton} font-roboto-body-2`}
        onClick={handleDropdownClick}
      >
        Sort <SortIcon />
      </Button>
      {isOpen && (
        <div className={styles.dropdownMenu}>
          <Button
            className={`${styles.dropdownItem} font-roboto-body-2`}
            onClick={() => handleOptionClick('Popular')}
          >
            Most popular
          </Button>
          <Button
            className={`${styles.dropdownItem} font-roboto-body-2`}
            onClick={() => handleOptionClick('Recent')}
          >
            Recent
          </Button>
          {!isSolutionSort && (
            <>
              <Button
                className={`${styles.dropdownItem} font-roboto-body-2`}
                onClick={() => handleOptionClick('Expire')}
              >
                Expire soon
              </Button>
              <Button
                className={`${styles.dropdownItem} font-roboto-body-2`}
                onClick={() => handleOptionClick('Reward')}
              >
                Highest reward
              </Button>
            </>
          )}
        </div>
      )}
    </div>
  )
}

```

frontend\src\components\ModuleComponent\Footer\Footer.tsx
```
import React from 'react'
import styles from './Footer.module.css'

export function Footer() {
  return (
    <>
      <div className={styles.footer}>
        <UpperBox />
        <DownBox />
      </div>
    </>
  )
}

function UpperBox() {
  return (
    <div className={styles.upperBox}>
      <div className={styles.upperLeftBox}>
        <div className={styles.logo}></div>
        <span className={styles.logoText}>Codes for all</span>
      </div>
      <div className={styles.upperRightBox}>
        <div className={styles.column}>
          <span className={`${styles.footerText} ${styles.textColor1}`}>
            Web development
          </span>
          <span className={`${styles.footerText} ${styles.textColor1}`}>
            text
          </span>
          <span className={`${styles.footerText} ${styles.textColor1}`}>
            text
          </span>
          <span className={`${styles.footerText} ${styles.textColor1}`}>
            text
          </span>
          <span className={`${styles.footerText} ${styles.textColor1}`}>
            text
          </span>
        </div>
        <div className={styles.column}>
          <span className={`${styles.footerText} ${styles.textColor1}`}>
            iOS development
          </span>
          <span className={`${styles.footerText} ${styles.textColor1}`}>
            text
          </span>
          <span className={`${styles.footerText} ${styles.textColor1}`}>
            text
          </span>
        </div>
        <div className={styles.column}>
          <span className={`${styles.footerText} ${styles.textColor1}`}>
            View project solutions
          </span>
          <span className={`${styles.footerText} ${styles.textColor1}`}>
            Explore projects
          </span>
          <span className={`${styles.footerText} ${styles.textColor1}`}>
            Community
          </span>
        </div>
      </div>
    </div>
  )
}

function DownBox() {
  return (
    <div className={styles.downBox}>
      <div className={styles.downRightBox}>
        <span className={`${styles.footerText} ${styles.textColor2}`}>
          Privacy Policy
        </span>
        <span className={`${styles.footerText} ${styles.textColor2}`}>
          Terms of Service
        </span>
      </div>
    </div>
  )
}

```

frontend\src\components\ModuleComponent\Header\Header.tsx
```
import React from 'react'
import styles from './Header.module.css'
import { Button, Input, Link } from '../../AtomComponent'
import logo from '../../../assets/images/fornerds.png'
// png 파일 import 위해서 아래 블로그 참고
// https://velog.io/@98soonrok/Cannot-find-module-..imagespattern.png-or-its-corresponding-type-declarations.-ts2307

/** 요구사항
 * 1. Link 컴포넌트를 이용하여 홈, 프로젝트 찾기, 랭킹, 컨텍트, 로그인, 회원가입 메뉴 링크 만들기(App.jsx에서 이동할 링크 확인해주세요.)
 * 2. Input 컴포넌트를 이용하여 검색창 만들기
 * 피그마 링크: https://www.figma.com/design/C8ak7mvyvyabez8CGRqEqX/Fornerds?node-id=500-10649&t=WnY63VjITSqhoELB-4
 */

export function Header() {
  return (
    <>
      <div className={styles.background}>
        <div className={styles.header}>
          <LeftBox />
          <RightBox />
        </div>
      </div>
    </>
  )
}

function LeftBox() {
  const categoryId = 2
  return (
    <div className={styles.leftBox}>
      <img src={logo} alt="포너즈 로고" width="60px" height="50px" />
      <div className={styles.nav}>
        <Link to="/" className={styles.text}>
          Home
        </Link>
        <Link to={'/worldmap'} className={styles.text}>
          Explore Project
        </Link>
        <Link to="/ranking" className={styles.text}>
          Ranking
        </Link>
        <Link to="/contact" className={styles.text}>
          Contact
        </Link>
        <Link to="/community" className={styles.text}>
          Community
        </Link>
      </div>
    </div>
  )
}

function RightBox() {
  return (
    <div className={styles.rightBox}>
      {/* <SearchBar /> */}
      <Member />
    </div>
  )
}

function Member() {
  return (
    <div className={styles.member}>
      <Button variant="default" size="small">
        <Link to="/login" className={styles.text}>
          Log In
        </Link>
      </Button>
      <Button variant="lessEmphasize" size="small">
        <Link to="/signup" className={styles.text}>
          Sign Up
        </Link>
      </Button>
    </div>
  )
}

function SearchBar() {
  return (
    <div className={styles.searchBar}>
      <div className={styles.searchIcon}>
        <SearchIcon />
      </div>
      <div className={styles.searchInput}>
        {/* <input type='text' className={styles.searchText}>Search</input> */}
        <Input variant="secondary" type="text"></Input>
      </div>
    </div>
  )
}

function SearchIcon() {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
    >
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M10.5 3.75C6.77208 3.75 3.75 6.77208 3.75 10.5C3.75 14.2279 6.77208 17.25 10.5 17.25C12.3642 17.25 14.0506 16.4953 15.273 15.273C16.4953 14.0506 17.25 12.3642 17.25 10.5C17.25 6.77208 14.2279 3.75 10.5 3.75ZM2.25 10.5C2.25 5.94365 5.94365 2.25 10.5 2.25C15.0563 2.25 18.75 5.94365 18.75 10.5C18.75 12.5078 18.032 14.3491 16.8399 15.7793L21.5303 20.4697C21.8232 20.7626 21.8232 21.2374 21.5303 21.5303C21.2374 21.8232 20.7626 21.8232 20.4697 21.5303L15.7793 16.8399C14.3491 18.032 12.5078 18.75 10.5 18.75C5.94365 18.75 2.25 15.0563 2.25 10.5Z"
        fill="white"
        fillOpacity="0.65"
      />
    </svg>
  )
}

```

frontend\src\components\ModuleComponent\Pagination\Pagination.tsx
```
import React from 'react'
import styles from './Pagination.module.css'
import { ReactComponent as LeftArrow } from '../../../assets/icons/left_small.svg'
import { ReactComponent as RightArrow } from '../../../assets/icons/right_small.svg'
import { Button } from '../../AtomComponent'

interface PaginationProps {
  currentPage: number
  totalItems: number
  itemsPerPage: number
  className: string
  onPageChange: (page: number) => void
}

export function Pagination({
  currentPage,
  totalItems,
  itemsPerPage,
  className,
  onPageChange
}: PaginationProps) {
  const totalPages = Math.ceil(totalItems / itemsPerPage)
  const visiblePages = 5 * Math.ceil(totalPages / 5)
  const currentGroup = Math.ceil(currentPage / 5)
  const startPage = (currentGroup - 1) * 5 + 1
  const endPage = Math.min(currentGroup * 5, visiblePages)
  const pageNumbers = Array.from(
    { length: endPage - startPage + 1 },
    (_, i) => startPage + i
  )

  const handlePreviousPage = () => {
    if (currentPage > 1) {
      onPageChange(currentPage - 1)
    }
  }

  const handleNextPage = () => {
    if (currentPage < totalPages) {
      onPageChange(currentPage + 1)
    }
  }

  return (
    <div className={`${styles.pagination} ${className}`}>
      <Button
        className={styles.button}
        onClick={handlePreviousPage}
        disabled={currentPage === 1}
      >
        <LeftArrow strokeOpacity={currentPage === 1 ? '0.25' : '0.85'} />
      </Button>
      {pageNumbers.map((number) => (
        <Button
          key={number}
          className={`${styles.pageNumber} font-roboto-body-2 ${number === currentPage ? styles.currentPage : ''}`}
          onClick={() => onPageChange(number)}
          disabled={number > totalPages}
        >
          {number}
        </Button>
      ))}
      <Button
        className={styles.button}
        onClick={handleNextPage}
        disabled={currentPage === totalPages}
      >
        <RightArrow
          strokeOpacity={currentPage === totalPages ? '0.25' : '0.85'}
        />
      </Button>
    </div>
  )
}

```

frontend\src\components\ModuleComponent\Tab\Tab.tsx
```
import React, { useState } from 'react'
import styles from './Tab.module.css'
import { Button } from '../../AtomComponent'

interface TabProps {
  label: string
  content: React.ReactNode
  icon?: React.ReactNode
  activeIcon?: React.ReactNode
}

interface TabsProps {
  tabs: TabProps[]
  isMyPageTab?: boolean
  isBoomarkTab?: boolean
}

export function Tab({
  tabs,
  isMyPageTab = false,
  isBoomarkTab = false
}: TabsProps) {
  const [activeTab, setActiveTab] = useState(0)

  const handleTabClick = (index: number) => {
    setActiveTab(index)
  }

  return (
    <div className={isMyPageTab ? styles.myPageTabs : styles.tabs}>
      <div
        className={
          isMyPageTab
            ? styles.myPageTabListWrap
            : isBoomarkTab
              ? styles.bookmarkTabListWrap
              : styles.tabListWrap
        }
      >
        {isMyPageTab && (
          <h2 className={`${styles.pageTitle} font-pixellari-sub-header`}>
            My page
          </h2>
        )}
        <div className={isMyPageTab ? styles.myPageTabList : styles.tabList}>
          {tabs.map((tab, index) => (
            <Button
              key={index}
              className={
                isMyPageTab
                  ? `${styles.myPageTab}  ${index === activeTab ? styles.active : ''}`
                  : `${styles.tab}  ${index === activeTab ? styles.active : ''}`
              }
              onClick={() => handleTabClick(index)}
            >
              {index === activeTab && tab.activeIcon
                ? tab.activeIcon
                : tab.icon}
              <p className={`${styles.label} font-roboto-body-2`}>
                {tab.label}
              </p>
            </Button>
          ))}
        </div>
      </div>
      <div
        className={
          isMyPageTab
            ? styles.myPageTabContent
            : isBoomarkTab
              ? styles.bookmarkTabContent
              : styles.tabContent
        }
      >
        {tabs[activeTab].content}
      </div>
    </div>
  )
}

```

frontend\src\components\ModuleComponent\Tab\MyPage\Bookmarks\BookmarksTab.tsx
```
import React, { useRef, useState } from 'react'
import styles from './BookmarksTab.module.css'
import { ReactComponent as ProjectsIcon } from '../../../../../assets/icons/rocket_launch.svg'
import { ReactComponent as SolutionIcon } from '../../../../../assets/icons/lightbulb.svg'
import { Tab } from '../../Tab'
import { ProjectsTab, SolutionsTab } from './'

export function BookmarksTab() {
  const tabs = [
    {
      icon: <ProjectsIcon stroke="white" strokeOpacity="0.65" />,
      activeIcon: <ProjectsIcon stroke="#00C4B4" strokeOpacity="1" />,
      label: 'Projects',
      content: <ProjectsTab />
    },
    {
      icon: <SolutionIcon stroke="white" strokeOpacity="0.65" />,
      activeIcon: <SolutionIcon stroke="#00C4B4" strokeOpacity="1" />,
      label: 'Solutions',
      content: <SolutionsTab />
    }
  ]
  return (
    <div className={styles.bookmarksMain}>
      <h2 className={`${styles.pageIndex} font-pixellari-sub-header`}>
        Bookmarks
      </h2>
      <div className={styles.bookmarks}>
        <Tab tabs={tabs} isBoomarkTab={true} />
      </div>
    </div>
  )
}

```

frontend\src\components\ModuleComponent\Tab\MyPage\Bookmarks\Projects\ProjectsTab.tsx
```
import React, { useRef, useState } from 'react'
import styles from './ProjectsTab.module.css'
import { Pagination } from '../../../../Pagination'
import { QuestCard } from '../../../../Card'
import categoryImages from '../../../../../../assets/images/category'
import { ReactComponent as Right } from '../../../../../../assets/icons/right.svg'

type Quest = {
  userQuestId: number
  difficulty: 'Easy' | 'Medium' | 'Hard'
  isBookmarked: boolean
  bookmarkCount: number
  title: string
  description: string
  skills: string[]
  developerCount: number
  remaining_quests: number
  deadline: number
  rewardCash: number
  rewardExp: number
  status: 'inProgress' | 'completed'
  createdAt: string
  positionName: string
  opened: boolean
  link: string
}

type Project = {
  id: number
  title: string
  createdAt: string
  bookmarkCount: number
  categoryId: number
  questList: Quest[]
}

export function ProjectsTab() {
  const myProject = useRef<Project[]>(
    Array.from({ length: 7 }, (_, index) => {
      const categoryId = Math.floor(Math.random() * 8)
      const randomDate = new Date()
      randomDate.setDate(randomDate.getDate() - Math.floor(Math.random() * 365))
      return {
        id: index + 1,
        title: `Project name ${index + 1}`,
        categoryId: categoryId,
        categoryImage: Math.floor(Math.random() * 8),
        createdAt: randomDate.toISOString(),
        bookmarkCount: Math.floor(Math.random() * 500),
        questList: Array.from(
          { length: Math.floor(Math.random() * 5) },
          (_, i) => {
            const status: 'inProgress' | 'completed' = [
              'inProgress',
              'completed'
            ][Math.floor(Math.random() * 2)] as 'inProgress' | 'completed'
            return {
              userQuestId: i + 1,
              difficulty: ['Easy', 'Medium', 'Hard'][
                Math.floor(Math.random() * 3)
              ] as 'Easy' | 'Medium' | 'Hard',
              isBookmarked: true,
              bookmarkCount: Math.floor(Math.random() * 500),
              title: `Quest name ${i + 1}`,
              description:
                'Lorem ipsum dolor sit amet consectetur. Facilisis fermentum cras ipsum et sit odio volutpat tristique.',
              skills: ['JavaScript', 'Redux', 'HTML', 'CSS'],
              developerCount: Math.floor(Math.random() * 500),
              remaining_quests: Math.floor(Math.random() * 5),
              deadline:
                status === 'completed' ? 0 : Math.floor(Math.random() * 29) + 1,
              rewardCash: Math.floor(Math.random() * 1000000),
              rewardExp: Math.floor(Math.random() * 1000000),
              status: status,
              createdAt: randomDate.toISOString(),
              positionName: ['Front-end', 'Back-end', 'Full Stack', 'Designer'][
                Math.floor(Math.random() * 4)
              ],
              opened: [true, false][Math.floor(Math.random() * 2)],
              link: `/projects/${categoryId}/${index + 1}/quests/${i + 1}`
            }
          }
        )
      }
    })
  ).current

  const [currentPage, setCurrentPage] = useState(1)
  const itemsPerPage = 5

  const questListRefs = useRef<Array<HTMLUListElement | null>>([])

  const handleMouseDown =
    (index: number) => (e: React.MouseEvent<HTMLUListElement>) => {
      const questListRef = questListRefs.current[index]
      if (!questListRef) return

      const startX = e.clientX
      const startScrollLeft = questListRef.scrollLeft

      const handleMouseMove = (e: MouseEvent) => {
        if (!questListRef) return

        const deltaX = e.clientX - startX
        questListRef.scrollLeft = startScrollLeft - deltaX
      }

      const handleMouseUp = () => {
        document.removeEventListener('mousemove', handleMouseMove)
        document.removeEventListener('mouseup', handleMouseUp)
      }

      document.addEventListener('mousemove', handleMouseMove)
      document.addEventListener('mouseup', handleMouseUp)
    }

  const handlePageChange = (page: number) => {
    setCurrentPage(page)
  }

  const indexOfLastItem = currentPage * itemsPerPage
  const indexOfFirstItem = indexOfLastItem - itemsPerPage
  const currentItems = myProject.slice(indexOfFirstItem, indexOfLastItem)

  return (
    <div className={styles.myProjectList}>
      <ul className={styles.projectList}>
        {currentItems.map((project, index) => (
          <li className={styles.project} key={project.id}>
            <div className={styles.projectHeaderWrap}>
              <div className={styles.projectHeader}>
                <div className={styles.projectIndex}>
                  <img
                    src={categoryImages[project.categoryId]}
                    alt={`category ${project.categoryId}`}
                    width="30"
                    height="30"
                  />
                  <div className={styles.projectTitleWrap}>
                    <h3 className="font-roboto-card-title text-color-lighten">
                      {project.title}
                    </h3>
                    <p className="font-roboto-body-2 text-color-default">
                      {`${project.questList.length} quests opened`}
                    </p>
                  </div>
                </div>
                <Right stroke="#00C4B4" />
              </div>
            </div>
            {project.questList.length > 0 ? (
              <div className={styles.questListWrap}>
                <ul
                  className={styles.questList}
                  ref={(el) => (questListRefs.current[index] = el)}
                  role="listbox"
                  onMouseDown={handleMouseDown(index)}
                >
                  {project.questList.map((card) => (
                    <QuestCard
                      className={styles.card}
                      key={card.userQuestId}
                      {...card}
                    />
                  ))}
                </ul>
              </div>
            ) : (
              ''
            )}
          </li>
        ))}
      </ul>
      <Pagination
        className={styles.pagination}
        currentPage={currentPage}
        totalItems={myProject.length}
        itemsPerPage={itemsPerPage}
        onPageChange={handlePageChange}
      />
    </div>
  )
}

```

frontend\src\components\ModuleComponent\Tab\MyPage\Bookmarks\Solutions\SolutionsTab.tsx
```
import React, { useRef, useState } from 'react'
import styles from './SolutionsTab.module.css'
import { ReactComponent as BookmarkIcon } from '../../../../../../assets/icons/bookmark.svg'
import { SolutionsTabTable } from '../../../../Table'
import { Pagination } from '../../../../Pagination'

export function SolutionsTab() {
  const [currentPage, setCurrentPage] = useState(1)
  const itemsPerPage = 10

  const solutionList = useRef(
    Array.from({ length: 13 }, (_, i) => {
      const randomDate = new Date()
      randomDate.setDate(randomDate.getDate() - Math.floor(Math.random() * 365))
      return {
        id: i + 1,
        isBookmarked: true,
        title: `Quest ${i + 1}`,
        user_id: 7,
        user_image: 7,
        memoryUsage: Math.floor(Math.random() * 2000),
        createdAt: randomDate.toISOString()
      }
    })
  ).current

  const handlePageChange = (page: number) => {
    setCurrentPage(page)
  }

  const indexOfLastItem = currentPage * itemsPerPage
  const indexOfFirstItem = indexOfLastItem - itemsPerPage
  const currentItems = solutionList.slice(indexOfFirstItem, indexOfLastItem)

  return (
    <section className={styles.mySolutionContent}>
      <article className={styles.mySolution}>
        <div className={styles.solutionHeader}>
          <div className={styles.solutionHeaderCenterItem}>
            <BookmarkIcon width="24" height="24" fill="none" stroke="white" />
          </div>
          <div
            className={`${styles.solutionHeaderItem} font-roboto-cta-small text-color-lighten`}
          >
            Quest name
          </div>
          <div
            className={`${styles.solutionHeaderCenterItem} font-roboto-cta-small text-color-lighten`}
          >
            ID
          </div>
          <div
            className={`${styles.solutionHeaderItem} font-roboto-cta-small text-color-lighten`}
          >
            Memory
          </div>
          <div
            className={`${styles.solutionHeaderItem} font-roboto-cta-small text-color-lighten`}
          >
            Date
          </div>
        </div>
        <ol className={styles.solutionList}>
          {currentItems.map((solution) => (
            <SolutionsTabTable key={solution.id} {...solution} />
          ))}
        </ol>
      </article>
      <Pagination
        className={styles.pagination}
        currentPage={currentPage}
        totalItems={solutionList.length}
        itemsPerPage={itemsPerPage}
        onPageChange={handlePageChange}
      />
    </section>
  )
}

```

frontend\src\components\ModuleComponent\Tab\MyPage\Information\InformationTab.tsx
```
import React, { useRef, useState } from 'react'
import styles from './InformationTab.module.css'
import lock from '../../../../../assets/images/lock.webp'
import characters from '../../../../../assets/images/character'
import { ReactComponent as EditIcon } from '../../../../../assets/icons/edit.svg'
import languageImages from '../../../../../assets/images/programmingLanguage'
import categoryImages from '../../../../../assets/images/category'
import { Button, Input } from '../../../../../components/AtomComponent'

export function InformationTab() {
  const profile = useRef({
    id: Math.floor(Math.random() * 500),
    email: 'fornerds@mail.com',
    nickname: 'Fornerds',
    phoneNumber: '+82)10-0000-0000',
    country: 'South Korea',
    profileImage: Math.floor(Math.random() * 10),
    level: Math.floor(Math.random() * 30),
    exp: Math.floor(Math.random() * 100),
    userDevLanguage: [
      { id: 1, number: Math.floor(Math.random() * 50) },
      { id: 2, number: Math.floor(Math.random() * 50) },
      { id: 3, number: Math.floor(Math.random() * 50) },
      { id: 4, number: Math.floor(Math.random() * 50) },
      { id: 5, number: Math.floor(Math.random() * 50) },
      { id: 6, number: Math.floor(Math.random() * 50) },
      { id: 7, number: Math.floor(Math.random() * 50) },
      { id: 8, number: Math.floor(Math.random() * 50) },
      { id: 9, number: Math.floor(Math.random() * 50) },
      { id: 10, number: Math.floor(Math.random() * 50) },
      { id: 11, number: Math.floor(Math.random() * 50) },
      { id: 12, number: Math.floor(Math.random() * 50) },
      { id: 13, number: Math.floor(Math.random() * 50) },
      { id: 14, number: Math.floor(Math.random() * 50) }
    ],
    userCategory: [
      { id: 1, number: Math.floor(Math.random() * 50) },
      { id: 2, number: Math.floor(Math.random() * 50) },
      { id: 3, number: Math.floor(Math.random() * 50) },
      { id: 4, number: Math.floor(Math.random() * 50) },
      { id: 5, number: Math.floor(Math.random() * 50) },
      { id: 6, number: Math.floor(Math.random() * 50) },
      { id: 7, number: Math.floor(Math.random() * 50) },
      { id: 8, number: Math.floor(Math.random() * 50) },
      { id: 9, number: Math.floor(Math.random() * 50) }
    ]
  }).current

  const category = [
    { id: 1, name: 'Web development', img: categoryImages[8] },
    { id: 2, name: 'iOS development', img: categoryImages[5] },
    { id: 3, name: 'Android development', img: categoryImages[1] },
    { id: 4, name: 'Game development', img: categoryImages[4] },
    { id: 5, name: 'AI, ML & Data science', img: categoryImages[0] },
    { id: 6, name: 'Cyber security', img: categoryImages[7] },
    { id: 7, name: 'Embedded systems', img: categoryImages[3] },
    { id: 8, name: 'Internet of things', img: categoryImages[6] },
    { id: 9, name: 'Blockchain technology', img: categoryImages[2] }
  ]

  const programmingLanguage = [
    { id: 1, name: 'C#', img: languageImages[2] },
    { id: 2, name: 'C', img: languageImages[0] },
    { id: 3, name: 'C++', img: languageImages[1] },
    { id: 4, name: 'Java', img: languageImages[5] },
    { id: 5, name: 'Java Script', img: languageImages[6] },
    { id: 6, name: 'Type Script', img: languageImages[13] },
    { id: 7, name: 'Python', img: languageImages[8] },
    { id: 8, name: 'Ruby', img: languageImages[9] },
    { id: 9, name: 'Dart', img: languageImages[3] },
    { id: 10, name: 'Go', img: languageImages[4] },
    { id: 11, name: 'php', img: languageImages[7] },
    { id: 12, name: 'SQL', img: languageImages[11] },
    { id: 13, name: 'Swift', img: languageImages[12] },
    { id: 14, name: 'Rust', img: languageImages[10] }
  ]

  const [isEditing, setIsEditing] = useState(false)
  const [editProfile, setEditProfile] = useState({ ...profile })

  const listRef = useRef<HTMLDivElement>(null)

  const startY = useRef(0)
  const scrollTop = useRef(0)

  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement>) => {
    startY.current = e.clientY
    scrollTop.current = listRef.current?.scrollTop || 0
    document.addEventListener('mousemove', handleMouseMove)
    document.addEventListener('mouseup', handleMouseUp)
  }

  const handleMouseMove = (e: MouseEvent) => {
    const y = e.clientY - startY.current
    if (listRef.current) {
      listRef.current.scrollTop = scrollTop.current - y
    }
  }

  const handleMouseUp = () => {
    document.removeEventListener('mousemove', handleMouseMove)
    document.removeEventListener('mouseup', handleMouseUp)
  }

  const handleTouchStart = (e: React.TouchEvent<HTMLDivElement>) => {
    startY.current = e.touches[0].clientY
    scrollTop.current = listRef.current?.scrollTop || 0
  }

  const handleTouchMove = (e: React.TouchEvent<HTMLDivElement>) => {
    const y = e.touches[0].clientY - startY.current
    if (listRef.current) {
      listRef.current.scrollTop = scrollTop.current - y
    }
  }

  const handleEditClick = () => {
    setIsEditing(true)
  }

  const handleCancelClick = () => {
    setEditProfile({ ...profile })
    setIsEditing(false)
  }

  const handleSaveClick = () => {
    // Save the changes (this is where you would usually update the state or send a request to the server)
    Object.assign(profile, editProfile)
    setIsEditing(false)
  }

  const handleChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>
  ) => {
    const { name, value } = e.target
    setEditProfile({
      ...editProfile,
      [name]: value
    })
  }

  const maxCategoryNumber = Math.max(
    ...profile.userCategory.map((uc) => uc.number)
  )

  const maxLanguageNumber = Math.max(
    ...profile.userDevLanguage.map((ul) => ul.number)
  )

  return (
    <div className={styles.informationMain}>
      <section className={styles.info}>
        <article className={styles.personalInfo}>
          <h2 className={`${styles.pageIndex} font-pixellari-sub-header`}>
            Personal info
          </h2>
          <div className={styles.profileBox}>
            <div className={styles.characterInfo}>
              <div className={styles.characterImageWrap}>
                <img
                  src={characters[profile.profileImage]}
                  alt={`Character ${profile.profileImage}`}
                  width="100"
                  height="100"
                />
              </div>
              <div className={styles.expWrap}>
                <div className={styles.level}>
                  <h3 className="font-pixellari-sub-header text-color-lighten">
                    Level {profile.level}
                  </h3>
                  <div className={styles.expPercent}>
                    <p className="font-roboto-cta-small text-color-default">
                      {profile.exp}
                    </p>
                    <p className="font-roboto-body-2 text-color-default">
                      / 100 EXP
                    </p>
                  </div>
                </div>
                <progress
                  className={styles.progressBar}
                  value={profile.exp}
                  max="100"
                ></progress>
              </div>
            </div>
            <div className={styles.userInfo}>
              <div className={styles.userInfoList}>
                <div className={styles.userInfoItem}>
                  <div className={styles.userInfoItemLabel}>
                    <p className="text-color-lighten font-roboto-cta-small">
                      Name
                    </p>
                  </div>
                  <div className={styles.userInfoItemValue}>
                    {isEditing ? (
                      <Input
                        type="text"
                        name="nickname"
                        value={editProfile.nickname}
                        onChange={handleChange}
                        className={`${styles.input} font-roboto-body-2 text-color-lighten`}
                      />
                    ) : (
                      <p className="text-color-lighten font-roboto-body-1">
                        {profile.nickname}
                      </p>
                    )}
                  </div>
                </div>
                <div className={styles.userInfoItem}>
                  <div className={styles.userInfoItemLabel}>
                    <p className="text-color-lighten font-roboto-cta-small">
                      Nation
                    </p>
                  </div>
                  <div className={styles.userInfoItemValue}>
                    {isEditing ? (
                      <select
                        name="country"
                        value={editProfile.country}
                        onChange={handleChange}
                        className={`${styles.input} font-roboto-body-2 text-color-lighten`}
                      >
                        <option value="South Korea">South Korea</option>
                        <option value="Japan">Japan</option>
                        <option value="United States of America">
                          United States of America
                        </option>
                      </select>
                    ) : (
                      <p className="text-color-lighten font-roboto-body-1">
                        {profile.country}
                      </p>
                    )}
                  </div>
                </div>
                <div className={styles.userInfoItem}>
                  <div className={styles.userInfoItemLabel}>
                    <p className="text-color-lighten font-roboto-cta-small">
                      Email
                    </p>
                  </div>
                  <div className={styles.userInfoItemValue}>
                    {isEditing ? (
                      <Input
                        type="email"
                        name="email"
                        value={editProfile.email}
                        onChange={handleChange}
                        className={`${styles.input} font-roboto-body-2 text-color-lighten`}
                      />
                    ) : (
                      <p className="text-color-lighten font-roboto-body-1">
                        {profile.email}
                      </p>
                    )}
                  </div>
                </div>
                <div className={styles.userInfoItem}>
                  <div className={styles.userInfoItemLabel}>
                    <p className="text-color-lighten font-roboto-cta-small">
                      Contact
                    </p>
                  </div>
                  <div className={styles.userInfoItemValue}>
                    {isEditing ? (
                      <Input
                        type="text"
                        name="phoneNumber"
                        value={editProfile.phoneNumber}
                        onChange={handleChange}
                        className={`${styles.input} font-roboto-body-2 text-color-lighten`}
                      />
                    ) : (
                      <p className="text-color-lighten font-roboto-body-1">
                        {profile.phoneNumber}
                      </p>
                    )}
                  </div>
                </div>
              </div>
              {isEditing ? (
                <div className={styles.editButtons}>
                  <Button
                    onClick={handleCancelClick}
                    className={`${styles.button} text-color-lighten font-roboto-cta-small`}
                    variant="default"
                  >
                    Cancel
                  </Button>
                  <Button
                    onClick={handleSaveClick}
                    className={`${styles.button} text-color-lighten font-roboto-cta-small`}
                    variant="active"
                  >
                    Save
                  </Button>
                </div>
              ) : (
                <Button
                  onClick={handleEditClick}
                  className={`${styles.editButton} font-roboto-tag`}
                >
                  <EditIcon />
                  Edit
                </Button>
              )}
            </div>
          </div>
        </article>
        <article className={styles.accomplishment}>
          <h2 className={`${styles.pageIndex} font-pixellari-sub-header`}>
            Accomplishments
          </h2>
          <div
            className={styles.accomplishmentList}
            ref={listRef}
            role="listbox"
            tabIndex={0}
            onMouseDown={handleMouseDown}
            onTouchStart={handleTouchStart}
            onTouchMove={handleTouchMove}
          >
            {[...Array(15)].map((_, i) => (
              <img
                key={i}
                className={styles.lockImage}
                src={lock}
                alt="locked"
                width="120"
                height="120"
                draggable="false"
              />
            ))}
          </div>
        </article>
      </section>
      <div className={styles.hr}></div>
      <section className={styles.proficiency}>
        <article className={styles.categoryProficiency}>
          <h2 className={`${styles.pageIndex} font-pixellari-sub-header`}>
            Category proficiency
          </h2>
          <ol className={styles.categoryList}>
            <li className={styles.categoryItem}>
              <h3
                className={`${styles.categoryIndex} font-roboto-cta-small text-color-lighten`}
              >
                Category
              </h3>
              <h3
                className={`${styles.categoryIndex} font-roboto-cta-small text-color-lighten`}
              >
                Quest Number
              </h3>
            </li>
            {category.map((cat) => {
              const userCat = profile.userCategory.find(
                (uc) => uc.id === cat.id
              )
              const number = userCat ? userCat.number : 0
              const percentage = ((number / maxCategoryNumber) * 100).toFixed(2)
              return (
                <li className={styles.categoryItem} key={cat.id}>
                  <div className={styles.categoryLabel}>
                    <img src={cat.img} alt={cat.name} width="30" height="30" />
                    <h4 className="font-roboto-body-2 text-color-lighten">
                      {cat.name}
                    </h4>
                  </div>
                  <div className={styles.categoryProgress}>
                    <progress
                      className={styles.categoryprogressBar}
                      value={number}
                      max={maxCategoryNumber}
                    ></progress>
                    <span
                      className={`${styles.progressBarNumber} font-roboto-body-2 text-color-lighten`}
                    >
                      {number}
                    </span>
                  </div>
                </li>
              )
            })}
          </ol>
        </article>
        <article className={styles.languageProficiency}>
          <h2 className={`${styles.pageIndex} font-pixellari-sub-header`}>
            Programming language proficiency
          </h2>
          <ol className={styles.languageList}>
            <li className={styles.languageItem}>
              <h3
                className={`${styles.languageIndex} font-roboto-cta-small text-color-lighten`}
              >
                Language
              </h3>
              <h3
                className={`${styles.languageIndex} font-roboto-cta-small text-color-lighten`}
              >
                Quest Number
              </h3>
            </li>
            {programmingLanguage.map((lang) => {
              const userLang = profile.userDevLanguage.find(
                (uc) => uc.id === lang.id
              )
              const number = userLang ? userLang.number : 0
              const percentage = ((number / maxLanguageNumber) * 100).toFixed(2)

              return (
                <li className={styles.languageItem} key={lang.id}>
                  <div className={styles.languageLabel}>
                    <img
                      src={lang.img}
                      alt={lang.name}
                      width="30"
                      height="30"
                    />
                    <h4 className="font-roboto-body-2 text-color-lighten">
                      {lang.name}
                    </h4>
                  </div>
                  <div className={styles.languageProgress}>
                    <progress
                      className={styles.languageprogressBar}
                      value={number}
                      max={maxLanguageNumber}
                    ></progress>
                    <span
                      className={`${styles.progressBarNumber} font-roboto-body-2 text-color-lighten`}
                    >
                      {number}
                    </span>
                  </div>
                </li>
              )
            })}
          </ol>
        </article>
      </section>
    </div>
  )
}

```

frontend\src\components\ModuleComponent\Tab\MyPage\MyProjects\MyProjectsTab.tsx
```
import React, { useEffect, useMemo, useRef, useState } from 'react'
import styles from './MyProjectsTab.module.css'
import { SortFilter } from '../../../Filter'
import { Toggle } from '../../../../AtomComponent'
import { Pagination } from '../../../Pagination'
import { ReactComponent as Right } from '../../../../../assets/icons/right.svg'
import categoryImages from '../../../../../assets/images/category'
import { QuestCard } from '../../../Card'

type Quest = {
  userQuestId: number
  difficulty: 'Easy' | 'Medium' | 'Hard'
  isBookmarked: boolean
  bookmarkCount: number
  title: string
  description: string
  skills: string[]
  developerCount: number
  remaining_quests: number
  deadline: number
  rewardCash: number
  rewardExp: number
  status: 'inProgress' | 'completed'
  createdAt: string
  positionName: string
  opened: boolean
  link: string
}

type Project = {
  id: number
  title: string
  createdAt: string
  bookmarkCount: number
  categoryId: number
  questList: Quest[]
}

export function MyProjectsTab() {
  const sortProjectList = (
    projectList: Project[],
    sortType: string
  ): Project[] => {
    return projectList.sort((a, b) => {
      switch (sortType) {
        case 'Popular':
          return b.bookmarkCount - a.bookmarkCount
        case 'Recent':
          return (
            new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()
          )
        default:
          return 0
      }
    })
  }

  const myProject = useRef<Project[]>(
    Array.from({ length: 7 }, (_, index) => {
      const categoryId = Math.floor(Math.random() * 8)
      const randomDate = new Date()
      randomDate.setDate(randomDate.getDate() - Math.floor(Math.random() * 365))
      return {
        id: index + 1,
        title: `Project name ${index + 1}`,
        categoryId: categoryId,
        categoryImage: Math.floor(Math.random() * 8),
        createdAt: randomDate.toISOString(),
        bookmarkCount: Math.floor(Math.random() * 500),
        questList: Array.from(
          { length: Math.floor(Math.random() * 6) + 1 },
          (_, i) => {
            const status: 'inProgress' | 'completed' = [
              'inProgress',
              'completed'
            ][Math.floor(Math.random() * 2)] as 'inProgress' | 'completed'
            return {
              userQuestId: i + 1,
              difficulty: ['Easy', 'Medium', 'Hard'][
                Math.floor(Math.random() * 3)
              ] as 'Easy' | 'Medium' | 'Hard',
              isBookmarked: Math.random() > 0.5,
              bookmarkCount: Math.floor(Math.random() * 500),
              title: `Quest name ${i + 1}`,
              description:
                'Lorem ipsum dolor sit amet consectetur. Facilisis fermentum cras ipsum et sit odio volutpat tristique.',
              skills: ['JavaScript', 'Redux', 'HTML', 'CSS'],
              developerCount: Math.floor(Math.random() * 500),
              remaining_quests: Math.floor(Math.random() * 5),
              deadline:
                status === 'completed' ? 0 : Math.floor(Math.random() * 29) + 1,
              rewardCash: Math.floor(Math.random() * 1000000),
              rewardExp: Math.floor(Math.random() * 1000000),
              status: status,
              createdAt: randomDate.toISOString(),
              positionName: ['Front-end', 'Back-end', 'Full Stack', 'Designer'][
                Math.floor(Math.random() * 4)
              ],
              opened: [true, false][Math.floor(Math.random() * 2)],
              link: `/projects/${categoryId}/${index + 1}/quests/${i + 1}`
            }
          }
        )
      }
    })
  ).current

  const [currentPage, setCurrentPage] = useState(1)
  const [sortType, setSortType] = useState('default')
  const [onlyActive, setOnlyActive] = useState(false)
  const itemsPerPage = 5

  const handleSortChange = (sortType: string) => {
    setSortType(sortType)
  }

  const handlePageChange = (page: number) => {
    setCurrentPage(page)
  }

  const handleToggleChange = (checked: boolean) => {
    setOnlyActive(checked)
    setCurrentPage(1)
  }

  const sortedFilteredCards = useMemo(() => {
    let filteredCards: Project[] = myProject.reduce((acc, project) => {
      if (onlyActive) {
        const filteredQuests = project.questList.filter(
          (quest) => quest.status === 'inProgress'
        )
        return [...acc, { ...project, questList: filteredQuests }]
      } else {
        return [...acc, project]
      }
    }, [] as Project[])

    return sortProjectList(filteredCards, sortType)
  }, [sortType, onlyActive])

  const indexOfLastItem = currentPage * itemsPerPage
  const indexOfFirstItem = indexOfLastItem - itemsPerPage
  const currentItems = sortedFilteredCards.slice(
    indexOfFirstItem,
    indexOfLastItem
  )

  const questListRefs = useRef<Array<HTMLUListElement | null>>([])

  const handleMouseDown =
    (index: number) => (e: React.MouseEvent<HTMLUListElement>) => {
      const questListRef = questListRefs.current[index]
      if (!questListRef) return

      const startX = e.clientX
      const startScrollLeft = questListRef.scrollLeft

      const handleMouseMove = (e: MouseEvent) => {
        if (!questListRef) return

        const deltaX = e.clientX - startX
        questListRef.scrollLeft = startScrollLeft - deltaX
      }

      const handleMouseUp = () => {
        document.removeEventListener('mousemove', handleMouseMove)
        document.removeEventListener('mouseup', handleMouseUp)
      }

      document.addEventListener('mousemove', handleMouseMove)
      document.addEventListener('mouseup', handleMouseUp)
    }

  return (
    <div className={styles.myProjectMain}>
      <h2 className={`${styles.pageIndex} font-pixellari-sub-header`}>
        My projects
      </h2>
      <section className={styles.myProjectContent}>
        <article className={styles.filters}>
          <SortFilter onSortChange={handleSortChange} isSolutionSort={true} />
          <Toggle label="Ongoing" onChange={handleToggleChange} />
        </article>
        <div className={styles.myProjectList}>
          <ul className={styles.projectList}>
            {currentItems.map((project, index) => (
              <li className={styles.project} key={project.id}>
                <div className={styles.projectHeaderWrap}>
                  <div className={styles.projectHeader}>
                    <div className={styles.projectIndex}>
                      <img
                        src={categoryImages[project.categoryId]}
                        alt={`category ${project.categoryId}`}
                        width="30"
                        height="30"
                      />
                      <div className={styles.projectTitleWrap}>
                        <h3 className="font-roboto-card-title text-color-lighten">
                          {project.title}
                        </h3>
                        <p className="font-roboto-body-2 text-color-default">
                          {`${project.questList.length} quests opened`}
                        </p>
                      </div>
                    </div>
                    <Right stroke="#00C4B4" />
                  </div>
                </div>
                {project.questList.length > 0 ? (
                  <div className={styles.questListWrap}>
                    <ul
                      className={styles.questList}
                      ref={(el) => (questListRefs.current[index] = el)}
                      role="listbox"
                      onMouseDown={handleMouseDown(index)}
                    >
                      {project.questList.map((card) => (
                        <QuestCard
                          className={styles.card}
                          key={card.userQuestId}
                          {...card}
                        />
                      ))}
                    </ul>
                  </div>
                ) : (
                  ''
                )}
              </li>
            ))}
          </ul>
          <Pagination
            className={styles.pagination}
            currentPage={currentPage}
            totalItems={myProject.length}
            itemsPerPage={itemsPerPage}
            onPageChange={handlePageChange}
          />
        </div>
      </section>
    </div>
  )
}

```

frontend\src\components\ModuleComponent\Tab\MyPage\MySolutions\MySolutionsTab.tsx
```
import React, { useRef, useState } from 'react'
import styles from './MySolutionsTab.module.css'
import { Pagination } from '../../../Pagination'
import { ReactComponent as Heart } from '../../../../../assets/icons/heart.svg'
import { MySolutionTable } from '../../../Table'

export function MySolutionsTab() {
  const [currentPage, setCurrentPage] = useState(1)
  const itemsPerPage = 10

  const solutionList = useRef(
    Array.from({ length: 13 }, (_, i) => {
      const randomDate = new Date()
      randomDate.setDate(randomDate.getDate() - Math.floor(Math.random() * 365))
      return {
        id: i + 1,
        likeCount: Math.floor(Math.random() * 300),
        title: `Quest ${i + 1}`,
        user_id: 7,
        user_image: 7,
        memoryUsage: Math.floor(Math.random() * 2000),
        createdAt: randomDate.toISOString()
      }
    })
  ).current

  const handlePageChange = (page: number) => {
    setCurrentPage(page)
  }

  const indexOfLastItem = currentPage * itemsPerPage
  const indexOfFirstItem = indexOfLastItem - itemsPerPage
  const currentItems = solutionList.slice(indexOfFirstItem, indexOfLastItem)

  return (
    <div className={styles.mySolutionMain}>
      <h2 className={`${styles.pageIndex} font-pixellari-sub-header`}>
        My solutions
      </h2>
      <section className={styles.mySolutionContent}>
        <article className={styles.mySolution}>
          <div className={styles.solutionHeader}>
            <div className={styles.solutionHeaderCenterItem}>
              <Heart width="24" height="24" fill="none" stroke="white" />
            </div>
            <div
              className={`${styles.solutionHeaderItem} font-roboto-cta-small text-color-lighten`}
            >
              Quest name
            </div>
            <div
              className={`${styles.solutionHeaderCenterItem} font-roboto-cta-small text-color-lighten`}
            >
              ID
            </div>
            <div
              className={`${styles.solutionHeaderItem} font-roboto-cta-small text-color-lighten`}
            >
              Memory
            </div>
            <div
              className={`${styles.solutionHeaderItem} font-roboto-cta-small text-color-lighten`}
            >
              Date
            </div>
          </div>
          <ol className={styles.solutionList}>
            {currentItems.map((solution) => (
              <MySolutionTable key={solution.id} {...solution} />
            ))}
          </ol>
        </article>
        <Pagination
          className={styles.pagination}
          currentPage={currentPage}
          totalItems={solutionList.length}
          itemsPerPage={itemsPerPage}
          onPageChange={handlePageChange}
        />
      </section>
    </div>
  )
}

```

frontend\src\components\ModuleComponent\Table\Table.tsx
```
import React, { useState } from 'react'
import styles from './Table.module.css'
import { SolutionProps, MySolutionProps, SolutionsTapProps } from './TableProps'
import characters from '../../../assets/images/character'
import { Bookmark } from '../Bookmark'

const formatDateToKoreanFormat = (isoString: string): string => {
  const date = new Date(isoString)
  const options: Intl.DateTimeFormatOptions = {
    year: 'numeric',
    month: '2-digit',
    day: '2-digit',
    timeZone: 'Asia/Seoul'
  }

  return date
    .toLocaleDateString('ko-KR', options)
    .replace(/\./g, '')
    .replace(/ /g, '.')
}

export function Table() {
  return <></>
}

export function SolutionTable(props: SolutionProps) {
  return (
    <li className={styles.solutionTableList}>
      <div
        className={`${styles.solutionTableItem} font-roboto-body-1 text-color-lighten`}
      >
        {props.id}
      </div>
      <div
        className={`${styles.solutionTableItem} font-roboto-body-1 text-color-lighten`}
      >
        {props.likeCount}
      </div>
      <div
        className={`${styles.solutionTableItem} ${styles.userInfo} font-roboto-body-1 text-color-lighten`}
      >
        <img
          src={characters[props.user_image]}
          alt={`Character ${props.user_image}`}
          width="36"
          height="36"
        />
        {props.user_name}
      </div>
      <div
        className={`${styles.solutionTableItem} font-roboto-body-1 text-color-lighten`}
      >
        {props.codeLength} B
      </div>
      <div
        className={`${styles.solutionTableItem} font-roboto-body-1 text-color-lighten`}
      >
        {props.executionTime} ms
      </div>
      <div
        className={`${styles.solutionTableItem} font-roboto-body-1 text-color-lighten`}
      >
        {props.memoryUsage} KB
      </div>
      <div
        className={`${styles.solutionTableItem} font-roboto-body-1 text-color-default`}
      >
        {formatDateToKoreanFormat(props.createdAt)}
      </div>
    </li>
  )
}

export function MySolutionTable(props: MySolutionProps) {
  return (
    <li className={styles.mySolutionList}>
      <div
        className={`${styles.mySolutionCenterItem} font-roboto-body-1 text-color-lighten`}
      >
        {props.likeCount}
      </div>
      <div
        className={`${styles.mySolutionItem} font-roboto-body-1 text-color-lighten`}
      >
        {props.title}
      </div>
      <div
        className={`${styles.mySolutionCenterItem} font-roboto-body-1 text-color-lighten`}
      >
        <img
          src={characters[props.user_image]}
          alt={`Character ${props.user_image}`}
          width="36"
          height="36"
        />
      </div>
      <div
        className={`${styles.mySolutionItem} font-roboto-body-1 text-color-lighten`}
      >
        {props.memoryUsage} KB
      </div>
      <div
        className={`${styles.mySolutionItem} font-roboto-body-1 text-color-default`}
      >
        {formatDateToKoreanFormat(props.createdAt)}
      </div>
    </li>
  )
}

export function SolutionsTabTable(props: SolutionsTapProps) {
  const [isBookmarked, setIsBookmarked] = useState(props.isBookmarked || false)

  const handleBookmarkClick = () => {
    setIsBookmarked(!isBookmarked)
  }

  return (
    <li className={styles.mySolutionList}>
      <div
        className={`${styles.mySolutionCenterItem} font-roboto-body-1 text-color-lighten`}
      >
        <Bookmark
          width="24"
          height="24"
          isBookmarked={props.isBookmarked}
          onBookmarkClick={handleBookmarkClick}
        />
      </div>
      <div
        className={`${styles.mySolutionItem} font-roboto-body-1 text-color-lighten`}
      >
        {props.title}
      </div>
      <div
        className={`${styles.mySolutionCenterItem} font-roboto-body-1 text-color-lighten`}
      >
        <img
          src={characters[props.user_image]}
          alt={`Character ${props.user_image}`}
          width="36"
          height="36"
        />
      </div>
      <div
        className={`${styles.mySolutionItem} font-roboto-body-1 text-color-lighten`}
      >
        {props.memoryUsage} KB
      </div>
      <div
        className={`${styles.mySolutionItem} font-roboto-body-1 text-color-default`}
      >
        {formatDateToKoreanFormat(props.createdAt)}
      </div>
    </li>
  )
}

```

frontend\src\components\SignitureComponent\FeatureContent\FeatureContent.tsx
```
import React from 'react'
import styles from './FeatureContent.module.css'

export function FeatureContent() {
  return <></>
}

```

frontend\src\pages\Admin\Admin.tsx
```
import React from 'react'
import styles from './Admin.module.css'

export function Admin() {
  return <></>
}

```

frontend\src\pages\Community\Community.tsx
```
import React from 'react'
import styles from './Community.module.css'

export function Community() {
  return <></>
}

```

frontend\src\pages\Contact\Contact.tsx
```
import React from 'react'
import styles from './Contact.module.css'
import { Footer, Header } from '../../components/ModuleComponent'
import backgroundTop from '../../assets/images/background/background03.webp'
import { Button, Input } from '../../components/AtomComponent'

export function Contact() {
  return (
    <>
      <div className={styles.background}>
        <div
          className={styles.backgroundImage}
          style={{ backgroundImage: `url(${backgroundTop})` }}
        ></div>
        <div className={styles.content}>
          <Header />
          <main className={styles.main}>
            <h2 className="font-pixellari-header-3 text-color-lighten">
              Always welcome to chat
            </h2>
            <form className={styles.form}>
              <section className={styles.inputs}>
                <div className={styles.inputWrap}>
                  <label
                    htmlFor="name"
                    className="font-roboto-cta-small text-color-lighten"
                  >
                    Name
                  </label>
                  <Input
                    className={styles.input}
                    type="text"
                    name="name"
                    id="name"
                    placeholder="Add to the name"
                  ></Input>
                </div>
                <div className={styles.inputWrap}>
                  <label
                    htmlFor="email"
                    className="font-roboto-cta-small text-color-lighten"
                  >
                    Email
                  </label>
                  <Input
                    className={styles.input}
                    type="email"
                    name="email"
                    id="email"
                    placeholder="Add to the email"
                  ></Input>
                </div>
                <div className={styles.inputWrap}>
                  <label
                    htmlFor="subject"
                    className="font-roboto-cta-small text-color-lighten"
                  >
                    Subject
                  </label>
                  <textarea
                    className={`${styles.input} ${styles.textarea}`}
                    name="subject"
                    id="subject"
                    placeholder="Add to the discussion"
                  ></textarea>
                </div>
              </section>
              <Button
                className={`${styles.button} font-roboto-cta-small text-color-lighten`}
                type="submit"
                variant="active"
              >
                Submit
              </Button>
            </form>
          </main>
        </div>
        <Footer />
      </div>
    </>
  )
}

```

frontend\src\pages\Home\Home.tsx
```
import React from 'react'
import styles from './Home.module.css'
import { Button, Tag } from '../../components/AtomComponent'
import { Card } from '../../components/ModuleComponent'

export function Home() {
  return (
    <>
      <div className={styles.background}>
        <div className={styles.title}>Hello world</div>
      </div>
    </>
  )
}

```

frontend\src\pages\Login\Login.tsx
```
import React from 'react'
import styles from './Login.module.css'

export function Login() {
  return <></>
}

```

frontend\src\pages\MyPage\MyPage.tsx
```
import React from 'react'
import styles from './MyPage.module.css'
import { Footer, Header, Tab } from '../../components/ModuleComponent'
import backgroundTop from '../../assets/images/background/background03.webp'
import backgroundBottom from '../../assets/images/background/background04.webp'
import { ReactComponent as UserIcon } from '../../assets/icons/user.svg'
import { ReactComponent as ProjectsIcon } from '../../assets/icons/rocket_launch.svg'
import { ReactComponent as SolutionIcon } from '../../assets/icons/lightbulb.svg'
import { ReactComponent as BookmarkIcon } from '../../assets/icons/bookmark.svg'
import { DiscussionIcon } from '../../assets/icons/DiscussionIcon'
import {
  BookmarksTab,
  InformationTab,
  MyProjectsTab,
  MySolutionsTab
} from '../../components/ModuleComponent/Tab/MyPage'

export function MyPage() {
  const tabs = [
    {
      icon: <UserIcon />,
      label: 'imformation',
      content: <InformationTab />
    },
    {
      icon: <ProjectsIcon stroke="white" strokeOpacity="0.85" />,
      label: 'My Projects',
      content: <MyProjectsTab />
    },
    {
      icon: <SolutionIcon stroke="white" strokeOpacity="0.85" />,
      label: 'My Solutions',
      content: <MySolutionsTab />
    },
    {
      icon: <BookmarkIcon width="24" height="24" fill="none" stroke="white" />,
      label: 'Bookmarks',
      content: <BookmarksTab />
    },
    {
      icon: <DiscussionIcon stroke="white" strokeOpacity="0.85" />,
      label: 'Activities',
      content: <div>Activities...</div>
    }
  ]

  return (
    <div className={styles.background}>
      <div
        className={styles.backgroundImage}
        style={{ backgroundImage: `url(${backgroundTop})` }}
      ></div>
      <div
        className={styles.backgroundImageBottom}
        style={{ backgroundImage: `url(${backgroundBottom})` }}
      ></div>
      <div className={styles.content}>
        <Header />
        <main className={styles.main}>
          <Tab tabs={tabs} isMyPageTab={true} />
        </main>
      </div>
      <Footer />
    </div>
  )
}

```

frontend\src\pages\Projects\[categoryId]\Projects.tsx
```
import React, { useState, useRef } from 'react'
import styles from './Projects.module.css'
import {
  Card,
  Footer,
  Header,
  Pagination,
  SortFilter,
  CategoryFilter,
  ProjectFilter
} from '../../../components/ModuleComponent'
import { Input, Toggle } from '../../../components/AtomComponent'
import { ReactComponent as SearchIcon } from '../../../assets/icons/magnifying_glass.svg'

function getRandomElements(arr: string[], min: number, max: number) {
  const result = []
  const numElements = Math.floor(Math.random() * (max - min + 1)) + min
  const usedIndices = new Set()

  while (result.length < numElements) {
    const randomIndex = Math.floor(Math.random() * arr.length)

    if (!usedIndices.has(randomIndex)) {
      result.push(arr[randomIndex])
      usedIndices.add(randomIndex)
    }
  }

  return result
}

interface Filter {
  [key: string]: boolean
}

export function Projects() {
  // 카드 더미 데이터
  const cards = useRef(
    Array.from({ length: 53 }, (_, i) => {
      const status = ['inProgress', 'completed'][
        Math.floor(Math.random() * 2)
      ] as 'inProgress' | 'completed'
      const randomDate = new Date()
      randomDate.setDate(randomDate.getDate() - Math.floor(Math.random() * 365))
      return {
        projectId: i + 1,
        difficulty: ['Easy', 'Medium', 'Hard'][Math.floor(Math.random() * 3)],
        isBookmarked: Math.random() > 0.5,
        bookmarkCount: Math.floor(Math.random() * 500),
        title: `Project name ${i + 1}`,
        description:
          'Lorem ipsum dolor sit amet consectetur. Facilisis fermentum cras ipsum et sit odio volutpat tristique. Facilisis fermentum cras ipsum et sit odio volutpat tristique. Facilisis fermentum cras ipsum et sit odio volutpat tristique.',
        skills: getRandomElements(['JavaScript', 'Redux', 'HTML', 'CSS'], 1, 4),
        developerCount: Math.floor(Math.random() * 500),
        remaining_quests: Math.floor(Math.random() * 5),
        deadline:
          status === 'completed' ? 0 : Math.floor(Math.random() * 29) + 1,
        rewardCash: Math.floor(Math.random() * 1000000),
        status: status,
        createdAt: randomDate.toISOString()
      }
    })
  ).current

  const searchBarRef = useRef<HTMLDivElement>(null)
  const [searchTerm, setSearchTerm] = useState('')
  const [currentPage, setCurrentPage] = useState(1)
  const [sortType, setSortType] = useState('default')
  const [onlyActive, setOnlyActive] = useState(false)
  const [filters, setfilters] = useState<Filter>({
    Hard: true,
    Medium: true,
    Easy: true,
    JavaScript: true,
    Redux: true,
    HTML: true,
    CSS: true
  })

  const itemsPerPage = 10

  const handleFocus = () => {
    if (searchBarRef.current) {
      searchBarRef.current.classList.add(styles.focused)
    }
  }

  const handleBlur = () => {
    if (searchBarRef.current) {
      searchBarRef.current.classList.remove(styles.focused)
    }
  }

  const handleSortChange = (sortType: string) => {
    setSortType(sortType)
  }

  const handlePageChange = (page: number) => {
    setCurrentPage(page)
  }

  const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearchTerm(e.target.value)
    setCurrentPage(1)
  }

  const handleToggleChange = (checked: boolean) => {
    setOnlyActive(checked)
    setCurrentPage(1)
  }

  const handleFilterChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, checked } = e.target
    setfilters({
      ...filters,
      [name]: checked
    })
    // console.log(filteredCards)
  }

  const filteredCards = cards
    .filter((card) =>
      card.title.toLowerCase().includes(searchTerm.toLowerCase())
    )
    .filter((card) => (onlyActive ? card.deadline > 0 : true))
    .filter((card) => card.skills.some((skill) => filters[skill]))
    .filter((card) => filters[card.difficulty])

  const sortedCards = filteredCards.sort((a, b) => {
    switch (sortType) {
      case 'Popular':
        return b.bookmarkCount - a.bookmarkCount
      case 'Recent':
        return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()
      case 'Expire':
        return a.deadline - b.deadline
      case 'Reward':
        return b.rewardCash - a.rewardCash
      default:
        return 0
    }
  })

  const indexOfLastItem = currentPage * itemsPerPage
  const indexOfFirstItem = indexOfLastItem - itemsPerPage
  const currentItems = sortedCards.slice(indexOfFirstItem, indexOfLastItem)

  return (
    <div className={styles.background}>
      <Header />
      <main className={styles.main}>
        <section className={styles.hero}>
          <h2 className={`${styles.title} font-pixellari-hero`}>
            Blockchain Technology
          </h2>
          <div className={styles.searchBar} ref={searchBarRef}>
            <span>
              <SearchIcon strokeOpacity="0.65" />
            </span>
            <Input
              type="text"
              className={`${styles.searchBarInput} font-roboto-card-title`}
              placeholder="Find your project"
              onFocus={handleFocus}
              onBlur={handleBlur}
              value={searchTerm}
              onChange={handleSearchChange}
            />
          </div>
        </section>
        <section className={styles.flex}>
          <article className={styles.filters}>
            <SortFilter onSortChange={handleSortChange} />
            <Toggle label="Ongoing" onChange={handleToggleChange} />
          </article>
          <div className={styles.cardBox}>
            <div className={styles.asideFilter}>
              <div className={styles.category}>
                <p className={`text-color-white font-pixellari-sub-header`}>
                  Category
                </p>
                <CategoryFilter />
              </div>
              <div className={styles.filter}>
                <p className={`text-color-white font-pixellari-sub-header`}>
                  Filter
                </p>
                <ProjectFilter
                  filters={filters}
                  onFilterChange={handleFilterChange}
                />
              </div>
            </div>
            <ul className={styles.cardList}>
              {currentItems.map((card) => (
                <Card className={styles.card} key={card.projectId} {...card} />
              ))}
            </ul>
          </div>
        </section>
        <Pagination
          className={styles.pagination}
          currentPage={currentPage}
          totalItems={sortedCards.length}
          itemsPerPage={itemsPerPage}
          onPageChange={handlePageChange}
        />
      </main>
      <Footer />
    </div>
  )
}

```

frontend\src\pages\Projects\[categoryId]\[projectId]\ProjectsDetails.tsx
```
import React, { useState, useRef } from 'react'
import styles from './ProjectsDetails.module.css'
import {
  Footer,
  Header,
  Pagination,
  QuestCard,
  SortFilter,
  Tab
} from '../../../../components/ModuleComponent'
import { NavLink, useParams } from 'react-router-dom'
import { Bookmark } from '../../../../components/ModuleComponent/Bookmark'
import { ReactComponent as Users } from '../../../../assets/icons/users.svg'
import { ReactComponent as Code_bracket } from '../../../../assets/icons/code_bracket.svg'
import { ReactComponent as Calendar } from '../../../../assets/icons/calendar.svg'
import { ReactComponent as Easy_active } from '../../../../assets/icons/easy_active.svg'
import { ReactComponent as Medium_active } from '../../../../assets/icons/medium_active.svg'
import { ReactComponent as Hard_active } from '../../../../assets/icons/hard_active.svg'
import { ReactComponent as OverviewIcon } from '../../../../assets/icons/eye.svg'
import { ReactComponent as QuestBoardIcon } from '../../../../assets/icons/rectangle_stack.svg'
import { ReactComponent as QuestBoardAtiveIcon } from '../../../../assets/icons/lightbulb.svg'
import { ReactComponent as Ellipse } from '../../../../assets/icons/ellipse.svg'
import { Button, Tag, Toggle } from '../../../../components/AtomComponent'
import money from '../../../../assets/images/pixel/money.webp'
import cup from '../../../../assets/images/pixel/cup.webp'
import { ProjectBodyTab } from './Tab/Overview/ProjectBodyTab'

export function ProjectsDetails() {
  let { categoryId, projectId } = useParams()
  const [currentPage, setCurrentPage] = useState(1)
  const [sortType, setSortType] = useState('default')
  const [onlyActive, setOnlyActive] = useState(false)
  const [selectedPositions, setSelectedPositions] = useState<string[]>([])
  const [selectedDifficulties, setSelectedDifficulties] = useState<string[]>([])
  const itemsPerPage = 8

  const status = ['inProgress', 'completed'][Math.floor(Math.random() * 2)] as
    | 'inProgress'
    | 'completed'
  const randomDate = new Date()
  randomDate.setDate(randomDate.getDate() - Math.floor(Math.random() * 365))

  const project = useRef({
    projectId: Number(projectId),
    difficulty: ['Easy', 'Medium', 'Hard'][Math.floor(Math.random() * 3)],
    isBookmarked: Math.random() > 0.5,
    title: `Project name ${projectId}`,
    description:
      'Lorem ipsum dolor sit amet consectetur. Facilisis fermentum cras ipsum et sit odio volutpat tristique. Facilisis fermentum cras ipsum et sit odio volutpat tristique. Facilisis fermentum cras ipsum et sit odio volutpat tristique.',
    skills: ['JavaScript', 'Redux', 'HTML', 'CSS'],
    developerCount: Math.floor(Math.random() * 500),
    remaining_quests: Math.floor(Math.random() * 5),
    deadline: status === 'completed' ? 0 : Math.floor(Math.random() * 29) + 1,
    rewardCash: Math.floor(Math.random() * 1000000),
    rewardExp: Math.floor(Math.random() * 1000000),
    status: status,
    createdAt: randomDate.toISOString()
  }).current

  const cards = useRef(
    Array.from({ length: 53 }, (_, i) => {
      const status = ['inProgress', 'completed'][
        Math.floor(Math.random() * 2)
      ] as 'inProgress' | 'completed'
      const randomDate = new Date()
      randomDate.setDate(randomDate.getDate() - Math.floor(Math.random() * 365))
      return {
        userQuestId: i + 1,
        difficulty: ['Easy', 'Medium', 'Hard'][Math.floor(Math.random() * 3)],
        isBookmarked: Math.random() > 0.5,
        bookmarkCount: Math.floor(Math.random() * 500),
        title: `Quest name ${i + 1}`,
        description:
          'Lorem ipsum dolor sit amet consectetur. Facilisis fermentum cras ipsum et sit odio volutpat tristique. Facilisis fermentum cras ipsum et sit odio volutpat tristique. Facilisis fermentum cras ipsum et sit odio volutpat tristique.',
        skills: ['JavaScript', 'Redux', 'HTML', 'CSS'],
        developerCount: Math.floor(Math.random() * 500),
        remaining_quests: Math.floor(Math.random() * 5),
        deadline:
          status === 'completed' ? 0 : Math.floor(Math.random() * 29) + 1,
        rewardCash: Math.floor(Math.random() * 1000000),
        rewardExp: Math.floor(Math.random() * 1000000),
        status: status,
        createdAt: randomDate.toISOString(),
        positionName: ['Front-end', 'Back-end', 'Full Stack', 'Designer'][
          Math.floor(Math.random() * 4)
        ],
        opened: [true, false][Math.floor(Math.random() * 2)],
        link: `/projects/${categoryId}/${projectId}/quests/${i + 1}`
      }
    })
  ).current

  const positions = ['Front-end', 'Back-end', 'Full Stack', 'Designer']
  const difficulties = ['Hard', 'Medium', 'Easy']

  const handleTagClick = (tag: string, type: 'position' | 'difficulty') => {
    if (type === 'position') {
      setSelectedPositions((prev) =>
        prev.includes(tag) ? prev.filter((pos) => pos !== tag) : [...prev, tag]
      )
    } else if (type === 'difficulty') {
      setSelectedDifficulties((prev) =>
        prev.includes(tag)
          ? prev.filter((diff) => diff !== tag)
          : [...prev, tag]
      )
    }
  }

  const [isBookmarked, setIsBookmarked] = useState(
    project.isBookmarked || false
  )

  const handleBookmarkClick = () => {
    setIsBookmarked(!isBookmarked)
  }

  const handleSortChange = (sortType: string) => {
    setSortType(sortType)
  }

  const handlePageChange = (page: number) => {
    setCurrentPage(page)
  }

  const handleToggleChange = (checked: boolean) => {
    setOnlyActive(checked)
    setCurrentPage(1)
  }

  const filteredCards = cards
    .filter((card) => (onlyActive ? card.deadline > 0 : true))
    .filter((card) =>
      selectedPositions.length > 0
        ? selectedPositions.includes(card.positionName)
        : true
    )
    .filter((card) =>
      selectedDifficulties.length > 0
        ? selectedDifficulties.includes(card.difficulty)
        : true
    )

  const sortedCards = filteredCards.sort((a, b) => {
    switch (sortType) {
      case 'Popular':
        return b.bookmarkCount - a.bookmarkCount
      case 'Recent':
        return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()
      case 'Expire':
        return a.deadline - b.deadline
      case 'Reward':
        return b.rewardCash - a.rewardCash
      default:
        return 0
    }
  })

  const indexOfLastItem = currentPage * itemsPerPage
  const indexOfFirstItem = indexOfLastItem - itemsPerPage
  const currentItems = sortedCards.slice(indexOfFirstItem, indexOfLastItem)

  const tabs = [
    {
      icon: <OverviewIcon stroke="white" strokeOpacity="0.38" />,
      activeIcon: <OverviewIcon stroke="#00C4B4" strokeOpacity="1" />,
      label: 'Overview',
      content: (
        <>
          <div className={styles.tabBackground}>
            <section className={styles.tabSection}>
              <ProjectBodyTab />
            </section>
          </div>
        </>
      )
    },
    {
      icon: <QuestBoardIcon strokeOpacity="0.65" />,
      activeIcon: <QuestBoardAtiveIcon stroke="#00C4B4" strokeOpacity="1" />,
      label: 'Quest Board',
      content: (
        <>
          <div className={styles.tabBackground}>
            <section className={styles.tabSection}>
              <div className={styles.flex}>
                <article className={styles.filters}>
                  <div className={styles.tagFilters}>
                    <div className={styles.positions}>
                      {positions.map((position) => (
                        <Button
                          key={position}
                          className={`${styles.tagFilter} font-roboto-body-2 ${selectedPositions.includes(position) ? styles.activeTag : ''}`}
                          variant="default"
                          onClick={() => handleTagClick(position, 'position')}
                        >
                          <Ellipse
                            fill={
                              selectedPositions.includes(position)
                                ? 'var(--Color-primary-300, #00C4B4)'
                                : 'var(--Color-text-default, rgba(255, 255, 255, 0.65))'
                            }
                          />
                          {position}
                        </Button>
                      ))}
                    </div>
                    <div className={styles.verticalLine}></div>
                    <div className={styles.positions}>
                      {difficulties.map((difficulty) => (
                        <Button
                          key={difficulty}
                          className={`${styles.tagFilter} font-roboto-body-2 ${selectedDifficulties.includes(difficulty) ? styles.activeTag : ''}`}
                          variant="default"
                          onClick={() =>
                            handleTagClick(difficulty, 'difficulty')
                          }
                        >
                          <Ellipse
                            fill={
                              selectedDifficulties.includes(difficulty)
                                ? 'var(--Color-primary-300, #00C4B4)'
                                : 'var(--Color-text-default, rgba(255, 255, 255, 0.65))'
                            }
                          />
                          {difficulty}
                        </Button>
                      ))}
                    </div>
                  </div>
                  <div className={styles.sortFilters}>
                    <SortFilter onSortChange={handleSortChange} />
                    <Toggle label="Ongoing" onChange={handleToggleChange} />
                  </div>
                </article>
                <ul className={styles.cardList}>
                  {currentItems.map((card) => (
                    <QuestCard
                      className={styles.card}
                      key={card.userQuestId}
                      {...card}
                    />
                  ))}
                </ul>
              </div>
              <Pagination
                className={styles.pagination}
                currentPage={currentPage}
                totalItems={sortedCards.length}
                itemsPerPage={itemsPerPage}
                onPageChange={handlePageChange}
              />
            </section>
          </div>
        </>
      )
    }
  ]

  return (
    <div className={styles.background}>
      <Header />
      <main className={styles.main}>
        <header className={styles.projectHeader}>
          <section className={styles.projectHeaderInfo}>
            <div className={styles.contentsBox}>
              <article className={styles.leftBox}>
                <span className={styles.leftBoxHeader}>
                  <span className={`${styles.navList} font-roboto-body-2`}>
                    <NavLink to={'/'} className={styles.prevPage}>
                      Home
                    </NavLink>
                    /
                    <NavLink
                      to={`/projects/${categoryId}`}
                      className={styles.prevPage}
                    >
                      Project list
                    </NavLink>
                    /<span className={styles.currentPage}>Project detail</span>
                  </span>
                  <Bookmark
                    width="36"
                    height="36"
                    isBookmarked={isBookmarked}
                    onBookmarkClick={handleBookmarkClick}
                  />
                </span>
                <h2 className={`${styles.title} font-roboto-header-2`}>
                  {project.title}
                </h2>
                <span className={styles.projectInfo}>
                  <span
                    className={`${styles.projectInfoItem} font-roboto-body-1`}
                  >
                    <Users width="24" height="24" /> {project.developerCount}{' '}
                    Developers
                  </span>
                  <span
                    className={`${styles.projectInfoItem} font-roboto-body-1`}
                  >
                    <Code_bracket width="24" height="24" />
                    {project.remaining_quests} Quests left
                  </span>
                  <span
                    className={`${styles.projectInfoItem} font-roboto-body-1`}
                  >
                    <Calendar width="24" height="24" />
                    {project.deadline && project.deadline > 0
                      ? `${project.deadline} Days left`
                      : 'Closed'}
                  </span>
                </span>
              </article>
              <article className={styles.rightBox}>
                <span className={styles.rightBoxItem}>
                  <p className={`${styles.projectLabel} font-roboto-body-2`}>
                    Difficulty
                  </p>
                  <Tag
                    className={`${styles.difficulty} font-roboto-tag`}
                    variant="active"
                    rounded
                  >
                    {project.difficulty === 'Hard' ? (
                      <Hard_active width="16" height="16" />
                    ) : project.difficulty === 'Medium' ? (
                      <Medium_active width="16" height="16" />
                    ) : project.difficulty === 'Easy' ? (
                      <Easy_active width="16" height="16" />
                    ) : (
                      ''
                    )}
                    {project.difficulty}
                  </Tag>
                </span>
                <span className={styles.rightBoxItem}>
                  <p className={`${styles.projectLabel} font-roboto-body-2`}>
                    Language
                  </p>
                  <span className={styles.skillList}>
                    {project.skills &&
                      project.skills.map((skill, index) => (
                        <Tag
                          key={index}
                          className={`${styles.skill} font-roboto-button text-color-lighten`}
                          variant="default"
                        >
                          {skill}
                        </Tag>
                      ))}
                  </span>
                </span>
                <span className={styles.rightBoxItem}>
                  <p className={`${styles.projectLabel} font-roboto-body-2`}>
                    Reward
                  </p>
                  <span className={styles.rewards}>
                    {project.rewardCash && (
                      <img src={money} alt="money" width="45px" height="30px" />
                    )}
                    {project.rewardExp && (
                      <img src={cup} alt="cup" width="30px" height="30px" />
                    )}
                  </span>
                </span>
              </article>
            </div>
          </section>
        </header>
        <Tab tabs={tabs} />
      </main>
      <Footer />
    </div>
  )
}

```

frontend\src\pages\Projects\[categoryId]\[projectId]\Quests\[questId]\QuestDetails.tsx
```
import React, { useState, useRef } from 'react'
import styles from './QuestDetails.module.css'
import {
  Footer,
  Header,
  BookmarkButton,
  Tab,
  SortFilter,
  Pagination,
  SolutionTable,
  TextContent
} from '../../../../../../components/ModuleComponent'
import { NavLink, useParams } from 'react-router-dom'
import { Button, Tag } from '../../../../../../components/AtomComponent'
import { ReactComponent as Users } from '../../../../../../assets/icons/users.svg'
import { ReactComponent as Calendar } from '../../../../../../assets/icons/calendar.svg'
import { ReactComponent as Hard_white } from '../../../../../../assets/icons/hard_white.svg'
import { ReactComponent as Medium_white } from '../../../../../../assets/icons/medium_white.svg'
import { ReactComponent as Easy_white } from '../../../../../../assets/icons/easy_white.svg'
import { ReactComponent as OverviewIcon } from '../../../../../../assets/icons/eye.svg'
import { DiscussionIcon } from '../../../../../../assets/icons/DiscussionIcon'
import { ReactComponent as SolutionIcon } from '../../../../../../assets/icons/lightbulb.svg'
import { ReactComponent as Heart } from '../../../../../../assets/icons/heart.svg'
import open from '../../../../../../assets/images/pixel/open.webp'
import half_open from '../../../../../../assets/images/pixel/half_open.webp'
import closed from '../../../../../../assets/images/pixel/closed.webp'
import cup from '../../../../../../assets/images/pixel/cup.webp'
import money from '../../../../../../assets/images/pixel/money.webp'
import { Discussion } from './Discussion/Discussion'

export function QuestDetails() {
  let { categoryId, projectId, questId } = useParams()
  const [currentPage, setCurrentPage] = useState(1)
  const [onlyActive, setOnlyActive] = useState(false)
  const [sortType, setSortType] = useState('default')
  const itemsPerPage = 10

  const handlePageChange = (page: number) => {
    setCurrentPage(page)
  }

  const handleToggleChange = (checked: boolean) => {
    setOnlyActive(checked)
    setCurrentPage(1)
  }

  const handleSortChange = (sortType: string) => {
    setSortType(sortType)
  }

  const solutionList = useRef(
    Array.from({ length: 53 }, (_, i) => {
      const randomDate = new Date()
      randomDate.setDate(randomDate.getDate() - Math.floor(Math.random() * 365))
      return {
        id: i + 1,
        likeCount: Math.floor(Math.random() * 500),
        createdAt: randomDate.toISOString(),
        user_id: Math.floor(Math.random() * 500),
        user_name: `user name ${i + 1}`,
        user_image: Math.floor(Math.random() * 10),
        codeLength: Math.floor(Math.random() * 2000),
        executionTime: Math.floor(Math.random() * 1000),
        memoryUsage: Math.floor(Math.random() * 2000)
      }
    })
  ).current

  const sortedsolutionList = solutionList.sort((a, b) => {
    switch (sortType) {
      case 'Popular':
        return b.likeCount - a.likeCount
      case 'Recent':
        return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()
      default:
        return 0
    }
  })

  const indexOfLastItem = currentPage * itemsPerPage
  const indexOfFirstItem = indexOfLastItem - itemsPerPage
  const currentItems = sortedsolutionList.slice(
    indexOfFirstItem,
    indexOfLastItem
  )

  const status = ['inProgress', 'completed'][Math.floor(Math.random() * 2)] as
    | 'inProgress'
    | 'completed'
  const randomDate = new Date()
  randomDate.setDate(randomDate.getDate() - Math.floor(Math.random() * 365))

  const initialQuest = useRef({
    userQuestId: questId,
    difficulty: ['Easy', 'Medium', 'Hard'][Math.floor(Math.random() * 3)],
    isBookmarked: Math.random() > 0.5,
    bookmarkCount: Math.floor(Math.random() * 500),
    title: `Quest name ${questId}`,
    description:
      'Lorem ipsum dolor sit amet consectetur. Facilisis fermentum cras ipsum et sit odio volutpat tristique. Facilisis fermentum cras ipsum et sit odio volutpat tristique. Facilisis fermentum cras ipsum et sit odio volutpat tristique.',
    skills: ['JavaScript', 'Redux', 'HTML', 'CSS'],
    developerCount: Math.floor(Math.random() * 500),
    remaining_quests: Math.floor(Math.random() * 5),
    deadline: status === 'completed' ? 0 : Math.floor(Math.random() * 29) + 1,
    rewardCash: Math.floor(Math.random() * 1000000),
    rewardExp: Math.floor(Math.random() * 1000000),
    status: status,
    createdAt: randomDate.toISOString(),
    positionName: ['Front-end', 'Back-end', 'Full Stack', 'Designer'][
      Math.floor(Math.random() * 4)
    ],
    QuestStatus: ['closed', 'opened', 'solved'][Math.floor(Math.random() * 3)],
    link: `/projects/${categoryId}/${projectId}/quests/${questId}`
  }).current

  const [quest, setQuest] = useState(initialQuest)
  const [isBookmarked, setIsBookmarked] = useState(quest.isBookmarked || false)

  const handleBookmarkClick = () => {
    setIsBookmarked(!isBookmarked)
  }

  const handleStatusChange = () => {
    setQuest((prevQuest) => {
      let newStatus
      switch (prevQuest.QuestStatus) {
        case 'closed':
          newStatus = 'opened'
          break
        case 'opened':
          newStatus = 'solved'
          break
        case 'solved':
          newStatus = 'solved'
          break
        default:
          newStatus = 'closed'
      }
      return { ...prevQuest, QuestStatus: newStatus }
    })
  }

  const renderBubble = (status: string) => {
    if (status === 'solved') {
      return (
        <div className={styles.bubble}>
          <div className={styles.howto}>
            <h4 className="font-roboto-cta-small text-color-lighten">
              You solved it!
            </h4>
          </div>
        </div>
      )
    } else if (status === 'opened') {
      return (
        <div className={styles.bubble}>
          <div className={styles.howto}>
            <h4 className="font-roboto-cta-small text-color-lighten">
              How to solve the quest
            </h4>
            <ol className={styles.process}>
              <li className="font-roboto-body-2 text-color-lighten">
                1. Clone using the repository
              </li>
              <li className="font-roboto-body-2 text-color-lighten">
                2. Read the Readme.md file
              </li>
              <li className="font-roboto-body-2 text-color-lighten">
                3. Write the necessary code
              </li>
              <li className="font-roboto-body-2 text-color-lighten">
                4. Perform unit testing to verify that the code functions
                correctly
              </li>
              <li className="font-roboto-body-2 text-color-lighten">
                5. Submit the completed code
              </li>
            </ol>
          </div>
        </div>
      )
    }
    return null
  }

  const lipsum_sample_text_list = [
    'Lorem ipsum dolor sit amet consectetur',
    'Volutpat sit purus posuere laoreet dolor gravida curabitur',
    'Sapien tristique curabitur risus neque vulputate',
    'Maecenas proin est nisi auctor vel eget tortor sagittis'
  ]

  function TextField() {
    return (
      <div className={styles.text_field}>
        <TextContent
          title="About quest"
          description="Lorem ipsum dolor sit amet consectetur. Volutpat sit purus posuere laoreet dolor gravida curabitur. Sapien tristique curabitur risus neque vulputate. Id pellentesque nunc leo proin tortor. Maecenas proin est nisi auctor vel eget tortor sagittis. Tortor at ullamcorper purus ut nulla posuere eget tincidunt ipsum. Semper egestas ullamcorper convallis mi quis suspendisse mauris. Et arcu nunc ante nunc ut gravida dolor faucibus. Curabitur id id eros donec morbi. Lacus rutrum lorem magna tellus."
        />
        <TextContent title="Task description" list={lipsum_sample_text_list} />
        <TextContent
          title="Basic Requirements"
          list={lipsum_sample_text_list}
        />
      </div>
    )
  }

  const tabs = [
    {
      icon: <OverviewIcon stroke="white" strokeOpacity="0.38" />,
      activeIcon: <OverviewIcon stroke="#00C4B4" strokeOpacity="1" />,
      label: 'Overview',
      content: (
        <section className={styles.tabSection}>
          <TextField />
        </section>
      )
    },
    {
      icon: <DiscussionIcon stroke="white" strokeOpacity="0.38" />,
      activeIcon: <DiscussionIcon stroke="#00C4B4" strokeOpacity="1" />,
      label: 'Discussion',
      content: <Discussion />
    },
    {
      icon: <SolutionIcon stroke="white" strokeOpacity="0.38" />,
      activeIcon: <SolutionIcon stroke="#00C4B4" strokeOpacity="1" />,
      label: 'Solutions',
      content: (
        <section className={styles.tabSection}>
          <div className={styles.flex}>
            <article className={styles.filters}>
              <SortFilter
                onSortChange={handleSortChange}
                isSolutionSort={true}
              />
            </article>
            <div className={styles.solutionTableHeader}>
              <div
                className={`${styles.solutionTableHeaderItem} font-roboto-cta-small text-color-lighten`}
              >
                No.
              </div>
              <div>
                <Heart width="24" height="24" fill="none" stroke="white" />
              </div>
              <div
                className={`${styles.solutionTableHeaderItem} font-roboto-cta-small text-color-lighten`}
              >
                ID
              </div>
              <div
                className={`${styles.solutionTableHeaderItem} font-roboto-cta-small text-color-lighten`}
              >
                Code Length
              </div>
              <div
                className={`${styles.solutionTableHeaderItem} font-roboto-cta-small text-color-lighten`}
              >
                Time spent
              </div>
              <div
                className={`${styles.solutionTableHeaderItem} font-roboto-cta-small text-color-lighten`}
              >
                Memory
              </div>
              <div
                className={`${styles.solutionTableHeaderItem} font-roboto-cta-small text-color-lighten`}
              >
                Date
              </div>
            </div>
            <ol className={styles.solutionTableList}>
              {currentItems.map((solution) => (
                <SolutionTable key={solution.id} {...solution} />
              ))}
            </ol>
            <Pagination
              className={styles.pagination}
              currentPage={currentPage}
              totalItems={sortedsolutionList.length}
              itemsPerPage={itemsPerPage}
              onPageChange={handlePageChange}
            />
          </div>
        </section>
      )
    }
  ]

  return (
    <div className={styles.background}>
      <Header />
      <main className={styles.main}>
        <header className={styles.projectHeader}>
          <section className={styles.projectHeaderInfo}>
            <div className={styles.contentsBox}>
              <article className={styles.leftBox}>
                <span className={styles.leftBoxHeader}>
                  <span className={`${styles.navList} font-roboto-body-2`}>
                    <NavLink to={'/'} className={styles.prevPage}>
                      Home
                    </NavLink>
                    /
                    <NavLink
                      to={`/projects/${categoryId}`}
                      className={styles.prevPage}
                    >
                      Project list
                    </NavLink>
                    /
                    <NavLink
                      to={`/projects/${categoryId}/${projectId}`}
                      className={styles.prevPage}
                    >
                      Project detail
                    </NavLink>
                    /<span className={styles.currentPage}>Quest detail</span>
                  </span>
                </span>
                <div className={styles.questInfo}>
                  <h2 className={`${styles.title} font-roboto-header-2`}>
                    {quest.title}
                  </h2>
                  <div className={styles.questIndexs}>
                    <div className={styles.questIndex}>
                      <Tag
                        className={`${styles.position} font-roboto-body-3`}
                        variant="active"
                      >
                        {quest.positionName}
                      </Tag>
                      <span
                        className={`${styles.questIndexItem} font-roboto-body-2`}
                      >
                        <Users width="24" height="24" />
                        <p
                          className={`${styles.users} text-color-lighten  font-roboto-button`}
                        >
                          {quest.developerCount} Developers
                        </p>
                      </span>
                      <span
                        className={`${styles.questIndexItem} font-roboto-body-2`}
                      >
                        <Calendar width="24" height="24" />
                        <p
                          className={`${styles.date} text-color-lighten  font-roboto-button`}
                        >
                          {quest.deadline && quest.deadline > 0
                            ? `${quest.deadline} Days left`
                            : 'Closed'}
                        </p>
                      </span>
                    </div>
                    <div className={styles.language}>
                      {quest.skills.map((skill, index) => (
                        <Tag
                          key={index}
                          className={`${styles.skill} font-roboto-button text-color-lighten`}
                          variant="default"
                        >
                          {skill}
                        </Tag>
                      ))}
                    </div>
                  </div>
                </div>
              </article>
              <article className={styles.rightBox}>
                {renderBubble(quest.QuestStatus)}
                <div className={styles.openQuest}>
                  <div className={styles.upperBox}>
                    <Tag
                      className={`${styles.difficulty} font-roboto-body-3 text-color-lighten`}
                      variant="lighten"
                      rounded
                    >
                      {quest.difficulty === 'Hard' ? (
                        <Hard_white width="16" height="16" />
                      ) : quest.difficulty === 'Medium' ? (
                        <Medium_white width="16" height="16" />
                      ) : quest.difficulty === 'Easy' ? (
                        <Easy_white width="16" height="16" />
                      ) : (
                        ''
                      )}
                      {quest.difficulty}
                    </Tag>
                    <img
                      src={
                        quest.QuestStatus === 'solved'
                          ? open
                          : quest.QuestStatus === 'opened'
                            ? half_open
                            : closed
                      }
                      alt="reward"
                      className={styles.rewardImage}
                      width="60"
                      height="60"
                    />
                    <div className={styles.rewardInfo}>
                      {quest.rewardCash && (
                        <div className={styles.rewardItem}>
                          <img src={money} alt="money" width="27" height="18" />
                          <span className="text-color-lighten  font-roboto-button">
                            {quest.rewardCash.toLocaleString()}
                          </span>
                        </div>
                      )}
                      {quest.rewardExp && (
                        <div className={styles.rewardItem}>
                          <img
                            src={cup}
                            alt="experience"
                            width="20"
                            height="20"
                          />
                          <span className="text-color-lighten  font-roboto-button">
                            {quest.rewardExp.toLocaleString()}
                          </span>
                        </div>
                      )}
                    </div>
                  </div>
                  <div className={styles.questButtons}>
                    <Button
                      className={`${styles.Button} font-roboto-cta-small`}
                      variant="active"
                      onClick={handleStatusChange}
                    >
                      {quest.QuestStatus === 'solved'
                        ? 'View Solution'
                        : quest.QuestStatus === 'opened'
                          ? 'Submit Quest'
                          : 'Open Quest'}
                    </Button>
                    <BookmarkButton
                      isBookmarked={isBookmarked}
                      onBookmarkClick={handleBookmarkClick}
                    />
                  </div>
                </div>
              </article>
            </div>
          </section>
        </header>
        <Tab tabs={tabs} />
      </main>
      <Footer />
    </div>
  )
}

```

frontend\src\pages\Projects\[categoryId]\[projectId]\Quests\[questId]\Discussion\Discussion.tsx
```
import React, { useState } from 'react'
import styles from './Discussion.module.css'
import { Comment } from '../../../../../../../components/ModuleComponent/Comment'
import { CommentInput } from '../../../../../../../components/ModuleComponent/CommentInput'
import { CommentProps } from '../../../../../../../components/ModuleComponent/Comment/Comment'

const dummyComments = [
  {
    "id": 1,
    "content": "Lorem ipsum dolor sit amet consectetur. Amet nulla auctor semper a varius. Aenean blandit lectus arcu faucibus. Convallis tortor nullam tincidunt turpis accumsan. In risus ac ullamcorper cum ornare volutpat sed..",
    "likeCount": 235,
    "createdAt": "2024-01-24",
    "updatedAt": null,
    "deletedAt": null,
    "quest_id": 1,
    "user_id": "ecf4991e-7ba8-4d1d-a297-736d13b089ca",
    "replyData": [
      {
        "id": 101,
        "content": "Reply to comment 1",
        "likeCount": 50,
        "createdAt": "2024-01-24",
        "updatedAt": null,
        "deletedAt": null,
        "quest_id": 1,
        "user_id": "d77bd61c-6e58-46c0-b693-6e59b7d7f590"
      },
      {
        "id": 102,
        "content": "Another reply to comment 1",
        "likeCount": 20,
        "createdAt": "2024-01-25",
        "updatedAt": null,
        "deletedAt": null,
        "quest_id": 1,
        "user_id": "04bcd54a-0282-42d7-823e-1df544f48d51"
      }
    ]
  },
  {
    "id": 2,
    "content": "Another comment example.",
    "likeCount": 150,
    "createdAt": "2024-01-25",
    "updatedAt": null,
    "deletedAt": null,
    "quest_id": 2,
    "user_id": "04bcd54a-0282-42d7-823e-1df544f48d51",
    "replyData": []
  },
  {
    "id": 3,
    "content": "Third comment with some replies.",
    "likeCount": 120,
    "createdAt": "2024-01-26",
    "updatedAt": null,
    "deletedAt": null,
    "quest_id": 3,
    "user_id": "a148e3a5-9519-469e-8746-241171be1a8e",
    "replyData": [
      {
        "id": 103,
        "content": "Reply to comment 3",
        "likeCount": 30,
        "createdAt": "2024-01-27",
        "updatedAt": null,
        "deletedAt": null,
        "quest_id": 3,
        "user_id": "4f5a8058-7b09-470c-9e95-1215291b8e13"
      }
    ]
  },
  {
    "id": 4,
    "content": "Fourth comment example.",
    "likeCount": 80,
    "createdAt": "2024-01-28",
    "updatedAt": null,
    "deletedAt": null,
    "quest_id": 4,
    "user_id": "173cf32b-b49c-49d8-975e-9e44842c99cd",
    "replyData": []
  },
  {
    "id": 5,
    "content": "Fifth comment without replies.",
    "likeCount": 95,
    "createdAt": "2024-01-29",
    "updatedAt": null,
    "deletedAt": null,
    "quest_id": 5,
    "user_id": "72d2d546-c60f-400f-ad7f-2215c98d8bee",
    "replyData": []
  },
  {
    "id": 6,
    "content": "Sixth comment example.",
    "likeCount": 110,
    "createdAt": "2024-01-30",
    "updatedAt": null,
    "deletedAt": null,
    "quest_id": 6,
    "user_id": "b87655ec-d185-4961-a390-9be296c3c88e",
    "replyData": []
  },
  {
    "id": 7,
    "content": "Seventh comment with replies.",
    "likeCount": 130,
    "createdAt": "2024-01-31",
    "updatedAt": null,
    "deletedAt": null,
    "quest_id": 7,
    "user_id": "eea90068-2c8a-4ea5-9324-c6778faa98d1",
    "replyData": [
      {
        "id": 104,
        "content": "Reply to comment 7",
        "likeCount": 40,
        "createdAt": "2024-02-01",
        "updatedAt": null,
        "deletedAt": null,
        "quest_id": 7,
        "user_id": "0dc3263c-d54f-4942-9af8-07fcc5fb37bc"
      },
      {
        "id": 105,
        "content": "Another reply to comment 7",
        "likeCount": 25,
        "createdAt": "2024-02-02",
        "updatedAt": null,
        "deletedAt": null,
        "quest_id": 7,
        "user_id": "ecf4991e-7ba8-4d1d-a297-736d13b089ca"
      }
    ]
  }
]

const dummyUserData = [
  {
    "id": "ecf4991e-7ba8-4d1d-a297-736d13b089ca",
    "email": "dmunoz@hotmail.com",
    "password": "QRF1Xku%#M",
    "name": "Marvin Kidd",
    "nickname": "ricediana",
    "phoneNumber": "575-369-6607x2789",
    "language": "lb",
    "country": "Vanuatu",
    "profileImage": "./frontend/src/assets/images/character/character01.webp",
    "bio": "Kid worker go off. Show cold dinner let public...",
    "role": "user",
    "level": 65,
    "exp": 4175,
    "point": 881,
    "cash": 318,
    "isPublic": true,
    "createdAt": "2020-10-18T05:10:22",
    "updatedAt": "2023-11-22T03:34:04",
    "deletedAt": null
  },
  {
    "id": "d77bd61c-6e58-46c0-b693-6e59b7d7f590",
    "email": "wilsontyler@yahoo.com",
    "password": "R#7S#MmF#c",
    "name": "Justin Robertson",
    "nickname": "ruizbreanna",
    "phoneNumber": "(266)614-5356x882",
    "language": "pt",
    "country": "Belgium",
    "profileImage": "https://github.com/fornerds/fornerds/blob/b5f990e5b05ad1669a592c3f4d65cbeada128687/frontend/src/assets/images/character/character01.webp",
    "bio": "Action campaign board. Standard close magazine...",
    "role": "moderator",
    "level": 37,
    "exp": 5556,
    "point": 60,
    "cash": 65,
    "isPublic": false,
    "createdAt": "2020-04-12T06:40:53",
    "updatedAt": "2022-01-20T04:03:07",
    "deletedAt": "2020-02-16T17:28:38"
  },
  {
    "id": "04bcd54a-0282-42d7-823e-1df544f48d51",
    "email": "carlosroberts@gmail.com",
    "password": "&GfD2Iya@f",
    "name": "Kevin Koch",
    "nickname": "william43",
    "phoneNumber": "(840)095-3217x9914",
    "language": "nhn",
    "country": "Greenland",
    "profileImage": "https://github.com/fornerds/fornerds/blob/b5f990e5b05ad1669a592c3f4d65cbeada128687/frontend/src/assets/images/character/character01.webp",
    "bio": "For edge cut great car. Professor raise people...",
    "role": "moderator",
    "level": 93,
    "exp": 5649,
    "point": 288,
    "cash": 393,
    "isPublic": true,
    "createdAt": "2023-07-06T17:36:59",
    "updatedAt": "2021-02-09T16:11:42",
    "deletedAt": "2021-06-13T15:46:41"
  },
  {
    "id": "a148e3a5-9519-469e-8746-241171be1a8e",
    "email": "andrewryan@yahoo.com",
    "password": "1KFu%T+t^v",
    "name": "Tyler Davidson",
    "nickname": "hadams",
    "phoneNumber": "558.392.3103",
    "language": "pl",
    "country": "Lithuania",
    "profileImage": "https://placekitten.com/528/595",
    "bio": "Film generation town purpose interview already...",
    "role": "admin",
    "level": 31,
    "exp": 2031,
    "point": 936,
    "cash": 461,
    "isPublic": true,
    "createdAt": "2020-03-04T04:15:13",
    "updatedAt": "2020-08-21T19:34:37",
    "deletedAt": "2020-10-23T10:16:54"
  },
  {
    "id": "4f5a8058-7b09-470c-9e95-1215291b8e13",
    "email": "stephen08@webb.net",
    "password": "@1HRPKzf^H",
    "name": "Abigail Snyder",
    "nickname": "sarahcaldwell",
    "phoneNumber": "513-556-9373x90083",
    "language": "hak",
    "country": "Syrian Arab Republic",
    "profileImage": "https://www.lorempixel.com/223/184",
    "bio": "Some laugh radio usually understand sense posi...",
    "role": "moderator",
    "level": 9,
    "exp": 4759,
    "point": 114,
    "cash": 146,
    "isPublic": false,
    "createdAt": "2024-04-02T12:25:39",
    "updatedAt": "2021-07-26T20:37:40",
    "deletedAt": "2023-11-28T10:08:49"
  },
  {
    "id": "173cf32b-b49c-49d8-975e-9e44842c99cd",
    "email": "tina84@mckenzie-watson.com",
    "password": ")G2tZTAw33",
    "name": "Terry Morris",
    "nickname": "hughesmelissa",
    "phoneNumber": "001-267-185-3228x5552",
    "language": "ms",
    "country": "Portugal",
    "profileImage": "https://placekitten.com/424/628",
    "bio": "International necessary traditional deal many...",
    "role": "admin",
    "level": 9,
    "exp": 3429,
    "point": 101,
    "cash": 165,
    "isPublic": true,
    "createdAt": "2020-07-18T23:22:36",
    "updatedAt": "2022-09-02T08:30:41",
    "deletedAt": null
  },
  {
    "id": "72d2d546-c60f-400f-ad7f-2215c98d8bee",
    "email": "xlang@rios-gallagher.com",
    "password": "^thHUzZSK0",
    "name": "Whitney Hill",
    "nickname": "space",
    "phoneNumber": "(900)597-0230",
    "language": "ky",
    "country": "Bahrain",
    "profileImage": "https://placeimg.com/196/859/any",
    "bio": "Scene its tonight try able focus. Describe sub...",
    "role": "moderator",
    "level": 87,
    "exp": 5746,
    "point": 79,
    "cash": 435,
    "isPublic": false,
    "createdAt": "2023-12-08T01:48:09",
    "updatedAt": "2023-06-24T05:27:22",
    "deletedAt": "2023-05-07T12:19:03"
  },
  {
    "id": "b87655ec-d185-4961-a390-9be296c3c88e",
    "email": "john03@cook.net",
    "password": "PY*BpcIg_1",
    "name": "Jane Walker",
    "nickname": "justin72",
    "phoneNumber": "001-499-717-0074",
    "language": "ps",
    "country": "New Caledonia",
    "profileImage": "https://www.lorempixel.com/477/103",
    "bio": "Walk provide age then send traditional however...",
    "role": "moderator",
    "level": 92,
    "exp": 2799,
    "point": 658,
    "cash": 13,
    "isPublic": true,
    "createdAt": "2020-04-14T23:37:45",
    "updatedAt": "2020-10-31T00:39:49",
    "deletedAt": null
  }]

export function Discussion() {
  const [commentData, setCommentData] = useState<CommentProps[]>(dummyComments)
  const [visibleComments, setVisibleComments] = useState(4)

  const updateComment = (updatedComment: CommentProps) => {
    const updatedComments = commentData.map((comment) =>
      comment.id === updatedComment.id ? updatedComment : comment
    );
    setCommentData(updatedComments);
  };

  const deleteComment = (commentId: number) => {
    const updatedComments = commentData.filter((comment) => comment.id !== commentId);
    setCommentData(updatedComments);
  };

  const submitComment = (content: string) => {
    const newComment: CommentProps = {
      id: commentData.length + 1,
      content,
      likeCount: 0,
      createdAt: new Date().toISOString(),
      updatedAt: null,
      deletedAt: null,
      quest_id: 1,
      user_id: dummyUserData[0].id,
      replyData: []
    }
    commentData.unshift(newComment)
    setCommentData(commentData) // 업데이트된 commentData로 상태 업데이트
    console.log("댓글리스트 이후 : ", commentData)
  }

  const loadMoreComments = () => {
    setVisibleComments(visibleComments + 4)
  }

  // Like 숫자가 가장 많은 2개의 Comments 추출
  const popularComments = commentData.sort((a, b) => b.likeCount - a.likeCount).slice(0, 3)

  const imgUrl = 'frontend/src/assets/images/character/character01.webp'

  return (
    <div className={styles.contents_box}>
      <div className={styles.left_box}>
        <div className={styles.discussion_box}>
          <CommentInput
            buttonText="Submit"
            onSubmit={submitComment}
            profileImage={imgUrl} />
          <div className={styles.comments}>
            {commentData.slice(0, visibleComments).map((commentData) => (
              <Comment
                key={commentData.id}
                commentData={commentData}
                updateComment={updateComment}
                deleteComment={deleteComment}
                hideEditDelete={false}
                currentUser={dummyUserData[0]} />
            ))}
          </div>
          {visibleComments < commentData.length && (
            <div className={styles.load_more} onClick={loadMoreComments}>
              Load More
            </div>
          )}
        </div>
      </div>
      <div className={styles.right_box}>
        <div className={styles.popular_discussion}>
          <p>Popular discussion</p>
        </div>
        <div className={styles.popularCommentsList}>
          {popularComments.map((commentData) => (
            <Comment
              key={commentData.id}
              commentData={commentData}
              updateComment={() => { }}
              deleteComment={() => { }}
              hideEditDelete={true}
              currentUser={dummyUserData[0]} />
          ))}
        </div>
      </div>
    </div>
  )
}

```

frontend\src\pages\Projects\[categoryId]\[projectId]\Quests\[questId]\Solution\[solutionId]\Solution.tsx
```
import React from 'react'
import styles from './Solution.module.css'

export function Solution() {
  return <></>
}

```

frontend\src\pages\Projects\[categoryId]\[projectId]\Quests\[questId]\SubmitSolution\SubmitSolution.tsx
```
import React from 'react'
import styles from './SubmitSolution.module.css'

export function SubmitSolution() {
  return <></>
}

```

frontend\src\pages\Projects\[categoryId]\[projectId]\Tab\Overview\ProjectBodyTab.tsx
```
import React from 'react'
import styles from './ProjectBodyTab.module.css'
import { TextField } from './TextField'
import { ProjectDetailCards } from './ProjectDetailCards'

export function ProjectBodyTab() {
  return (
    <div className={styles.contents}>
      <ProjectDetailCards />
      <TextField />
    </div>
  )
}

```

frontend\src\pages\Projects\[categoryId]\[projectId]\Tab\Overview\ProjectDetailCards.tsx
```
import React, { ReactNode } from 'react'
import styles from './ProjectDetailCards.module.css'
import { ReactComponent as CodeBracket } from '../../../../../../assets/icons/code_bracket.svg'
import { ReactComponent as Clock } from '../../../../../../assets/icons/clock.svg'
import { ReactComponent as Gift } from '../../../../../../assets/icons/gift.svg'
import MoneyPixelIcon from '../../../../../../assets/images/pixel/money.webp'
import CupPixelIcon from '../../../../../../assets/images/pixel/cup.webp'

export function ProjectDetailCards() {
  return (
    <div className={styles.project_detail_cards}>
      <ProjectDetailCard
        title={TotalQuests.title}
        icon={TotalQuests.icon}
        number={TotalQuests.number}
      />
      <ProjectDetailCard
        title={TotalTime.title}
        icon={TotalTime.icon}
        number={TotalTime.number}
        unit={TotalTime.unit}
      />
      <ProjectDetailCard
        title={TotalReward.title}
        icon={TotalReward.icon}
        number={TotalReward.number}
        unit={TotalReward.unit}
        rewardMoney={TotalReward.rewardMoney}
        rewardExp={TotalReward.rewardExp}
      />
    </div>
  )
}

function ProjectDetailCard({
  title,
  icon,
  number,
  unit,
  rewardMoney,
  rewardExp
}: ProjectDetailCardProps) {
  return (
    <div className={styles.project_detail_card}>
      <div className={styles.card_upperLeftBox}>
        <p className={`text-color-lighten font-roboto-cta-small`}>{title}</p>
        {title == 'Total reward' ? (
          <div className={styles.reward}>
            <div className={styles.money}>
              <div className={styles.icon_money_small}>
                <img src={MoneyPixelIcon} alt="money_small"></img>
              </div>
              <p className={`text-color-default font-roboto-body-2`}>
                {rewardMoney ? rewardMoney.toLocaleString() : null}
              </p>
            </div>
            <div className={styles.exp}>
              <div className={styles.icon_cup_small}>
                <img src={CupPixelIcon} alt="cup_small"></img>
              </div>
              <p className={`text-color-default font-roboto-body-2`}>
                {rewardExp ? rewardExp.toLocaleString() : null}
              </p>
            </div>
          </div>
        ) : null}
      </div>
      <div className={styles.card_icon}>
        <CodeBracket width="24" height="24" />
      </div>
      <div className={styles.card_numberBox}>
        <p
          className={`text-color-lighten ${styles.card_numberBox_text} font-roboto-header-1`}
        >
          {number.toLocaleString()}
        </p>
        <div className={styles.card_numberBox_unit}>
          <p className={`text-color-lighten font-roboto-body-2`}>{unit}</p>
        </div>
      </div>
    </div>
  )
}

interface ProjectDetailCardProps {
  title: string
  icon: ReactNode
  number: number
  unit?: string
  rewardMoney?: number
  rewardExp?: number
}

const TotalQuests: ProjectDetailCardProps = {
  title: 'Total number of quests',
  icon: <CodeBracket width="24" height="24" />,
  number: 220
}

const TotalTime: ProjectDetailCardProps = {
  title: 'Total estimated time',
  icon: <Clock width="24" height="24" />,
  number: 1250,
  unit: 'Hours'
}

const TotalReward: ProjectDetailCardProps = {
  title: 'Total reward',
  icon: <Gift width="24" height="24" />,
  number: 500000,
  unit: 'USD',
  rewardMoney: 500000,
  rewardExp: 500000000
}

```

frontend\src\pages\Projects\[categoryId]\[projectId]\Tab\Overview\TextField.tsx
```
import React from 'react'
import styles from './TextField.module.css'
import { TextContent } from '../../../../../../components/ModuleComponent'
import { TextContentProps } from '../../../../../../components/ModuleComponent/Details/Overview/TextContent/TextContentProps'

export function TextField() {
  return (
    <div className={styles.text_field}>
      <TextContent
        title={AboutProject.title}
        description={AboutProject.description}
      />
      <TextContent
        title={WhatYouWillLearn.title}
        list={WhatYouWillLearn.list}
      />
      <TextContent title={TaskDescription.title} list={TaskDescription.list} />
      <TextContent
        title={BasicRequirements.title}
        list={BasicRequirements.list}
      />
      <TextContent title={HowToApply.title} list={HowToApply.list} />
    </div>
  )
}

const AboutProject: TextContentProps = {
  title: 'What you will learn',
  description: `Lorem ipsum dolor sit amet consectetur. 
  Volutpat sit purus posuere laoreet dolor gravida curabitur. 
  Sapien tristique curabitur risus neque vulputate. 
  Id pellentesque nunc leo proin tortor. 
  Maecenas proin est nisi auctor vel eget tortor sagittis. 
  Tortor at ullamcorper purus ut nulla posuere eget tincidunt ipsum. 
  Semper egestas ullamcorper convallis mi quis suspendisse mauris. 
  Et arcu nunc ante nunc ut gravida dolor faucibus. 
  Curabitur id id eros donec morbi. 
  Lacus rutrum lorem magna tellus.
  `
}
const lipsum_sample_text_list = [
  'Lorem ipsum dolor sit amet consectetur',
  'Volutpat sit purus posuere laoreet dolor gravida curabitur',
  'Sapien tristique curabitur risus neque vulputate',
  'Maecenas proin est nisi auctor vel eget tortor sagittis'
]
const WhatYouWillLearn: TextContentProps = {
  title: 'What you will learn',
  list: lipsum_sample_text_list
}
const TaskDescription: TextContentProps = {
  title: 'Task Description',
  list: lipsum_sample_text_list
}
const BasicRequirements: TextContentProps = {
  title: 'Basic Requirements',
  list: lipsum_sample_text_list
}
const HowToApply: TextContentProps = {
  title: 'How to Apply',
  list: lipsum_sample_text_list
}

```

frontend\src\pages\Ranking\Ranking.tsx
```
import React, { useState, useEffect } from 'react'
import styles from './Ranking.module.css'
import { Footer, Header } from '../../components/ModuleComponent'
import backgroundTop from '../../assets/images/background/background03.webp'
import backgroundBottom from '../../assets/images/background/background04.webp'
import characters from '../../assets/images/character'
import { ReactComponent as RiseIcon } from '../../assets/icons/rise.svg'
import { ReactComponent as KeepIcon } from '../../assets/icons/keep.svg'
import { ReactComponent as DescendIcon } from '../../assets/icons/descend.svg'
import { Button } from '../../components/AtomComponent'

const sampleData = Array.from({ length: 50 }, (_, index) => ({
  rank: index + 1,
  userImage: Math.floor(Math.random() * 10),
  userName: `User ${index + 1}`,
  country: 'South Korea',
  level: Math.floor(Math.random() * 100), // 랜덤 레벨 값
  totalQuestNumber: Math.floor(Math.random() * 500), // 랜덤 퀘스트 수
  rankChange: Math.floor(Math.random() * 3) - 1 // -1, 0, 1 중 하나의 값
}))

export function Ranking() {
  const [visibleItems, setVisibleItems] = useState(25)
  const [sortedData, setSortedData] = useState(sampleData)

  useEffect(() => {
    const sorted = [...sampleData].sort((a, b) => b.level - a.level)
    setSortedData(sorted.map((item, index) => ({ ...item, rank: index + 1 })))
  }, [])

  const handleLoadMore = () => {
    setVisibleItems((prev) => prev + 25)
  }

  const getRankChangeIcon = (change: number) => {
    if (change > 0) return <RiseIcon />
    if (change < 0) return <DescendIcon />
    return <KeepIcon />
  }

  return (
    <div className={styles.background}>
      <div
        className={styles.backgroundImage}
        style={{ backgroundImage: `url(${backgroundTop})` }}
      ></div>
      <div
        className={styles.backgroundImageBottom}
        style={{ backgroundImage: `url(${backgroundBottom})` }}
      ></div>
      <div className={styles.content}>
        <Header />
        <main className={styles.main}>
          <div className={styles.contentBox}>
            <section className={styles.ranking}>
              <div className={styles.rankingHeaderWrap}>
                <div className={styles.rankingHeader}>
                  <div className={styles.rankingIndex}>
                    <p className="font-roboto-cta-small text-color-lighten">
                      Rank
                    </p>
                  </div>
                  <div
                    className={`${styles.rankingIndex} ${styles.rankingchangeIndex}`}
                  ></div>
                  <div className={styles.rankingIndex}>
                    <p className="font-roboto-cta-small text-color-lighten">
                      User
                    </p>
                  </div>
                  <div className={styles.rankingIndex}>
                    <p className="font-roboto-cta-small text-color-lighten">
                      Nation
                    </p>
                  </div>
                  <div className={styles.rankingIndex}>
                    <p className="font-roboto-cta-small text-color-lighten">
                      Level
                    </p>
                  </div>
                  <div className={styles.rankingIndex}>
                    <p className="font-roboto-cta-small text-color-lighten">
                      Total Quest Number
                    </p>
                  </div>
                </div>
              </div>
              <ol className={styles.rankingList}>
                {sortedData.slice(0, visibleItems).map((user, index) => (
                  <li key={index} className={styles.rankingListItem}>
                    <div className={styles.rankingIndex}>
                      <p className="font-roboto-cta-small text-color-default">
                        {user.rank}
                      </p>
                    </div>
                    <span
                      className={`${styles.rankingIndex} ${styles.rankingchangeIndex}`}
                    >
                      {getRankChangeIcon(user.rankChange)}
                    </span>
                    <div className={styles.rankingIndex}>
                      <img
                        src={characters[user.userImage]}
                        alt={`User ${user.rank}`}
                        className={styles.userImage}
                        width="36"
                        height="36"
                      />
                      <p className="font-roboto-body-1 text-color-default">
                        {user.userName}
                      </p>
                    </div>
                    <div className={styles.rankingIndex}>
                      <p className="font-roboto-body-1 text-color-default">
                        {user.country}
                      </p>
                    </div>
                    <div className={styles.rankingIndex}>
                      <p className="font-roboto-body-1 text-color-default">
                        {user.level}
                      </p>
                    </div>
                    <div className={styles.rankingIndex}>
                      <p className="font-roboto-body-1 text-color-default">
                        {user.totalQuestNumber}
                      </p>
                    </div>
                  </li>
                ))}
              </ol>
            </section>
            {visibleItems < 50 && (
              <div className={styles.loadMore}>
                <Button
                  onClick={handleLoadMore}
                  className={`${styles.loadMoreButton} font-roboto-cta-small text-color-default`}
                >
                  Load more
                </Button>
              </div>
            )}
          </div>
        </main>
      </div>
      <Footer />
    </div>
  )
}

```

frontend\src\pages\Signup\Signup.tsx
```
import React from 'react'
import styles from './Signup.module.css'

export function Signup() {
  return <></>
}

```

frontend\src\pages\WorldMap\WorldMap.tsx
```
import React from 'react'
import styles from './WorldMap.module.css'

export function WorldMap() {
  return <></>
}

```

